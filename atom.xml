<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>淡笑忘、祈一世凡恋</title>
  
  <subtitle>进步的源泉来源于坚持不懈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.23ybob.club/"/>
  <updated>2019-02-28T09:46:46.386Z</updated>
  <id>https://www.23ybob.club/</id>
  
  <author>
    <name>Abriams</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript数据结构与算法六（集合）</title>
    <link href="https://www.23ybob.club/2019/02/28/cjsog2uq90010xsvby6p4ilst/"/>
    <id>https://www.23ybob.club/2019/02/28/cjsog2uq90010xsvby6p4ilst/</id>
    <published>2019-02-28T03:10:32.000Z</published>
    <updated>2019-02-28T09:46:46.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、构建数据集合"><a href="#一、构建数据集合" class="headerlink" title="一、构建数据集合"></a>一、构建数据集合</h2><p>集合是由一组无序且唯一（即不能重复）的项组成的。这个数据结构使用了与有限集合相同的数学概念，但应用在计算机科学的数据结构中。 </p><p>在深入学习集合的计算机科学实现之前，我们先看看它的数学概念。在数学中，集合是一组不同的对象（的集）。</p><p>比如说，一个由大于或等于0的整数组成的自然数集合：N = {0, 1, 2, 3, 4, 5, 6, …}。集合中的对象列表用“{}”（大括号）包围。</p><p>还有一个概念叫空集。空集就是不包含任何元素的集合。比如24和29之间的素数集合。由于24和29之间没有素数（除了1和自身，没有其他正因数的大于1的自然数），这个集合就是空集。空集用“{ }”表示。</p><p>你也可以把集合想象成一个既没有重复元素，也没有顺序概念的数组。</p><p>在数学中，集合也有并集、交集、差集等基本操作。在本片文章中我们也会介绍这些操作</p><h2 id="一、创建集合"><a href="#一、创建集合" class="headerlink" title="一、创建集合"></a>一、创建集合</h2><p>首先创建set类，Set类的骨架如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> items = &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个非常重要的细节，我们使用对象而不是数组来表示集合（items）。但也可以用数组实现。在这里我们用对象来实现，稍微有点儿不一样，也学习一下实现相似数据结构的新方<br>法。同时，JavaScript的对象不允许一个键指向两个不同的属性，也保证了集合里的元素都是唯一的。</p><p>接下来，需要声明一些集合可用的方法（我们会尝试模拟与ECMAScript 6实现相同的Set类）。</p><blockquote><p>add(value)：向集合添加一个新的项。<br>delete(value)：从集合移除一个值。<br>has(value)：如果值在集合中，返回true，否则返回false。<br>clear()：移除集合中的所有项。<br>size()：返回集合所包含元素的数量。与数组的length属性类似。<br>values()：返回一个包含集合中所有值的数组。</p></blockquote><h3 id="1-1-has-value-方法"><a href="#1-1-has-value-方法" class="headerlink" title="1.1 has(value)方法"></a>1.1 has(value)方法</h3><p>首先要实现的是has(value)方法。这是因为它会被add、remove等其他方法调用。下面看看它的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value <span class="keyword">in</span> items;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>既然我们使用对象来存储集合的值，就可以用JavaScript的in操作符来验证给定的值是否是items对象的属性。</p><p>但这个方法还有更好的实现方式，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.hasOwnProperty(value);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所有JavaScript对象都有hasOwnProperty方法。这个方法返回一个表明对象是否具有特定属性的布尔值。</p><h3 id="1-2-add方法"><a href="#1-2-add方法" class="headerlink" title="1.2 add方法"></a>1.2 add方法</h3><p>接下来要实现add方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.has(value))&#123;</span><br><span class="line">        items[value] = value; <span class="comment">//&#123;1&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于给定的value，可以检查它是否存在于集合中。如果不存在，就把value添加到集合中（行{1}），返回true，表示添加了这个值。如果集合中已经有这个值，就返回false，表示没有添加它。</p><p>添加一个值的时候，把它同时作为键和值保存，因为这样有利于查找这个值。</p><h3 id="1-3-remove-和-clear-方法"><a href="#1-3-remove-和-clear-方法" class="headerlink" title="1.3 remove 和 clear 方法"></a>1.3 remove 和 clear 方法</h3><p>下面要实现remove方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.has(value))&#123;</span><br><span class="line">    <span class="keyword">delete</span> items[value]; <span class="comment">//&#123;2&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在remove方法中，我们会验证给定的value是否存在于集合中。如果存在，就从集合中移除value（行{2}），返回true，表示值被移除；否则返回false。</p><p>既然用对象来存储集合的items对象，就可以简单地使用delete操作符从items对象中移除属性（行{2}）。</p><p>使用Set类的示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set.add(<span class="number">1</span>); <span class="comment">//true</span></span><br><span class="line">set.add(<span class="number">2</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>如果想移除集合中的所有值，可以用clear方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    items = &#123;&#125;; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>要重置items对象，需要做的只是把一个空对象重新赋值给它（行{3}）。我们也可以迭代集合，用remove方法依次移除所有的值，但既然有更简单的方法，那样做就太麻烦了</p><h3 id="1-4-size-方法"><a href="#1-4-size-方法" class="headerlink" title="1.4 size 方法"></a>1.4 size 方法</h3><p>下一个要实现的是size方法（返回集合中有多少项）。这个方法有三种实现方式。</p><p>第一种方法是使用一个length变量，每当使用add或remove方法时控制它，就像在上一章中使用LinkedList类一样。</p><p>第二种方法，使用JavaScript内建的Object类的一个内建函数（ECMAScript 5以上版本）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(items).length; <span class="comment">//&#123;4&#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>JavaScript的Object类有一个keys方法，它返回一个包含给定对象所有属性的数组。在这种情况下，可以使用这个数组的length属性（行{4}）来返回items对象的属性个数。以上代码只能在现代浏览器中运行（比如IE9以上版本、Firefox 4以上版本、Chrome 5以上版本、Opera 12以上版本、Safari 5以上版本，等等）。</p><p>第三种方法是手动提取items对象的每一个属性，记录属性的个数并返回这个数字。这个方法可以在任何浏览器上运行，和之前的代码是等价的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.sizeLegacy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> items) &#123; <span class="comment">//&#123;5&#125;</span></span><br><span class="line">        <span class="keyword">if</span>(items.hasOwnProperty(key)) <span class="comment">//&#123;6&#125;</span></span><br><span class="line">        ++count; <span class="comment">//&#123;7&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>遍历items对象的所有属性（行{5}），检查它们是否是对象自身的属性（避免重复计数——行{6}）。如果是，就递增count变量的值（行{7}），最后在方法结束时返回这个数字。</p><p>不能简单地使用for-in语句遍历items对象的属性，并递增count变量的值。还需要使用hasOwnProperty方法（以验证items对象具有该属性），因为对象的原型包含了额外的属性（属性既有继承自JavaScript的Object类的，也有属于对象自身，未用于数据结构的）。</p><h3 id="1-5-values-方法"><a href="#1-5-values-方法" class="headerlink" title="1.5 values 方法"></a>1.5 values 方法</h3><p>values方法也应用了相同的逻辑，提取items对象的所有属性，以数组的形式返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> values = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> items) &#123; <span class="comment">//&#123;7&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (items.hasOwnProperty(key)) &#123; <span class="comment">//&#123;8&#125;</span></span><br><span class="line">            values.push(items[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先遍历items对象的所有属性（行{7}），把它们添加一个数组中（行{8}），并返回这个数组。该方法类似于我们开发的sizeLegacy方法，但我们添加一个数组，而不是计算属性个数。</p><h3 id="1-6-使用-Set-类"><a href="#1-6-使用-Set-类" class="headerlink" title="1.6 使用 Set 类"></a>1.6 使用 Set 类</h3><p>现在数据结构已经完成了，执行Set类的方法，测试我们的Set类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//输出["1"]</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">1</span>)); <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.size()); <span class="comment">//输出1 </span></span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//输出["1", "2"]</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">2</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.size()); <span class="comment">//2</span></span><br><span class="line">set.remove(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//输出["2"]</span></span><br><span class="line">set.remove(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//输出[]</span></span><br></pre></td></tr></table></figure><h2 id="二、-集合操作"><a href="#二、-集合操作" class="headerlink" title="二、 集合操作"></a>二、 集合操作</h2><p>对集合可以进行如下操作。</p><blockquote><p>并集：对于给定的两个集合，返回一个包含两个集合中所有元素的新集合。<br>交集：对于给定的两个集合，返回一个包含两个集合中共有元素的新集合。<br>差集：对于给定的两个集合，返回一个包含所有存在于第一个集合且不存在于第二个集合的元素的新集合。<br>子集：验证一个给定集合是否是另一集合的子集。</p></blockquote><h3 id="2-1-并集"><a href="#2-1-并集" class="headerlink" title="2.1 并集"></a>2.1 并集</h3><p>并集的数学概念是集合A和集合B的并集，表示为：</p><blockquote><p>A∪B</p></blockquote><p>该集合定义如下：</p><blockquote><p>A∪B = { x | x ∈ A∨x ∈ B } </p></blockquote><p>意思是x（元素）存在于A中，或x存在于B中。下图展示了并集操作：</p><p><img src="/2019/02/28/cjsog2uq90010xsvby6p4ilst/union-01.png" alt="并集图示"></p><p>现在来实现Set类的union方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//union 方法</span></span><br><span class="line"><span class="keyword">this</span>.union = <span class="function"><span class="keyword">function</span> (<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">//&#123;1&#125;</span></span><br><span class="line">    <span class="keyword">let</span> values = <span class="keyword">this</span>.values(); <span class="comment">//&#123;2&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">        unionSet.add(values[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    values = otherSet.values(); <span class="comment">//&#123;3&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">        unionSet.add(values[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionSet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先需要创建一个新的集合，代表两个集合的并集（行{1}）。接下来，获取第一个集合（当前的Set类实例）所有的值（values），遍历并全部添加到代表并集的集合中（行{2}）。然后对第二个集合做同样的事（行{3}）。最后返回结果。</p><p>测试一下上面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br><span class="line">setB.add(<span class="number">5</span>);</span><br><span class="line">setB.add(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">let</span> unionAB = setA.union(setB);</span><br><span class="line"><span class="built_in">console</span>.log(unionAB.values());  <span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>输出为[“1”, “2”, “3”, “4”, “5”, “6”]。注意元素3同时存在于A和B中，它在结果的集合中只出现一次。</p><h3 id="2-2-交集"><a href="#2-2-交集" class="headerlink" title="2.2 交集"></a>2.2 交集</h3><p>交集的数学概念是集合A和集合B的交集，表示为：</p><blockquote><p>A∩B</p></blockquote><p>该集合定义如下：</p><blockquote><p>A∩B = { x | x ∈ A∧x ∈ B } </p></blockquote><p>意思是x（元素）存在于A中，且x存在于B中。下图展示了交集操作：</p><p><img src="/2019/02/28/cjsog2uq90010xsvby6p4ilst/intersection-01.png" alt="交集图示"></p><p>现在来实现Set类的intersection方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.intersection = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">//&#123;1&#125;</span></span><br><span class="line">    <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123; <span class="comment">//&#123;2&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (otherSet.has(values[i]))&#123; <span class="comment">//&#123;3&#125;</span></span><br><span class="line">            intersectionSet.add(values[i]); <span class="comment">//&#123;4&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>intersection方法需要找到当前Set实例中，所有也存在于给定Set实例中的元素。首先创建一个新的Set实例，这样就能用它返回共有的元素（行{1}）。接下来，遍历当前Set实例所有的值（行{2}），验证它们是否也存在于otherSet实例（行{3}）之中。可以用前面实现的has方法来验证元素是否存在于Set实例中。然后，如果这个值也存在于另一个Set实例中，就将其添加到创建的intersectionSet变量中（行{4}），最后返回它。</p><p>测试一下intersection方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">let</span> intersectionAB = setA.intersection(setB);</span><br><span class="line"><span class="built_in">console</span>.log(intersectionAB.values());</span><br></pre></td></tr></table></figure><p>输出为[“2”, “3”]，因为2和3同时存在于两个集合中。</p><h3 id="2-3-差集"><a href="#2-3-差集" class="headerlink" title="2.3 差集"></a>2.3 差集</h3><p>差集的数学概念是集合A和集合B的差集，表示为：AB，定义如下图：</p><p><img src="/2019/02/28/cjsog2uq90010xsvby6p4ilst/difference-01.png" alt="差集图示"></p><p>意思是x（元素）存在于A中，且x不存在于B中。下图展示了集合A和B的差集操作：</p><p><img src="/2019/02/28/cjsog2uq90010xsvby6p4ilst/difference-02.png" alt="差集图示"></p><p>现在来实现Set类的difference方法： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.difference = <span class="function"><span class="keyword">function</span> (<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">//&#123;1&#125;</span></span><br><span class="line">    <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123; <span class="comment">//&#123;2&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (!otherSet.has(values[i])) &#123; <span class="comment">//&#123;3&#125;</span></span><br><span class="line">            differenceSet.add(values[i]); <span class="comment">//&#123;4&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> differenceSet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>intersection方法会得到所有同时存在于两个集合中的值。而difference方法会得到所有存在于集合A但不存在于B的值。因此这两个方法在实现上唯一的区别就是行{3}。只获取不存在于otherSet实例中的值，而不是也存在于其中的值。行{1}、{2}和{4}是完全相同的。</p><p>测试difference方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">let</span> differenceAB = setA.difference(setB);</span><br><span class="line"><span class="built_in">console</span>.log(differenceAB.values());</span><br></pre></td></tr></table></figure><p>输出为[“1”]，因为1是唯一一个仅存在于setA的元素。</p><h3 id="2-3-子集"><a href="#2-3-子集" class="headerlink" title="2.3 子集"></a>2.3 子集</h3><p>子集的数学概念是集合A是集合B的子集（或集合B包含了A），表示为</p><blockquote><p>A⊆B</p></blockquote><p>该集合定义如下：</p><p>∀x { x ∈ A → x ∈ B } </p><p>意思是集合A中的每一个x（元素），也需要存在于B中。下图展示了集合A是集合B的子集：</p><p><img src="/2019/02/28/cjsog2uq90010xsvby6p4ilst/difference-01.png" alt="差集图示"></p><p>现在来实现Set类的subset方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.subset = <span class="function"><span class="keyword">function</span> (<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.size() &gt; otherSet.size()) &#123; <span class="comment">//&#123;1&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123; <span class="comment">//&#123;2&#125;</span></span><br><span class="line">            <span class="keyword">if</span> (!otherSet.has(values[i])) &#123; <span class="comment">//&#123;3&#125;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//&#123;4&#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//&#123;5&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先需要验证的是当前Set实例的大小。如果当前实例中的元素比otherSet实例更多，它就不是一个子集（行{1}）。子集的元素个数需要小于或等于要比较的集合。</p><p>接下来要遍历集合中的所有元素（行{2}），验证这些元素也存在于otherSet中（行{3}）。如果有任何元素不存在于otherSet中，就意味着它不是一个子集，返回false（行{4}）。如果所有元素都存在于otherSet中，行{4}就不会被执行，那么就返回true（行{5}）。</p><p>检验一下上面的代码效果如何：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>); </span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">1</span>);</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> setC = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setC.add(<span class="number">2</span>);</span><br><span class="line">setC.add(<span class="number">3</span>);</span><br><span class="line">setC.add(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(setA.subset(setB));</span><br><span class="line"><span class="built_in">console</span>.log(setA.subset(setC));</span><br></pre></td></tr></table></figure><p>我们有三个集合：setA是setB的子集（因此输出为true），然而setA不是setC的子集（setC只包含了setA中的2，而不包含1），因此输出为false。</p><h2 id="三、-ES6——Set-类"><a href="#三、-ES6——Set-类" class="headerlink" title="三、 ES6——Set 类"></a>三、 ES6——Set 类</h2><p>我们先看看原生的Set类怎么用。</p><p>还是用我们原来测试Set类的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">// 输出@Iterator</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">1</span>)); <span class="comment">// 输出true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.size); <span class="comment">// 输出1</span></span><br></pre></td></tr></table></figure><p>和我们的Set不同，ES6的Set的values方法返回Iterator（第2章提到过），而不是值构成的数组。另一个区别是，我们实现的size方法返回set中存储的值的个数，而ES6的Set则有一个size属性。</p><p>可以用delete方法删除set中的元素：</p><p>set.delete(1); </p><p>clear方法会重置set数据结构，这跟我们实现的功能一样</p><h3 id="3-1-ES6-Set-类的操作"><a href="#3-1-ES6-Set-类的操作" class="headerlink" title="3.1 ES6 Set 类的操作"></a>3.1 ES6 Set 类的操作</h3><p>我们的Set类实现了并集、交集、差集、子集等数学操作，然而ES6原生的Set并没有这些功能。不过，有需要的话，我们也可以模拟。</p><p>我们的例子会用到下面两个集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h4 id="3-1-1-模拟并集操作"><a href="#3-1-1-模拟并集操作" class="headerlink" title="3.1.1 模拟并集操作"></a>3.1.1 模拟并集操作</h4><p>我们可以创建一个新的集合，用来添加两个集合中所有的元素（行{1}）。迭代这两个集合（行{2}、行{3}），把所有元素都添加到并集的集合中。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unionAb = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">//&#123;1&#125;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> setA) unionAb.add(x); <span class="comment">//&#123;2&#125;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> setB) unionAb.add(x); <span class="comment">//&#123;3&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-1-2-模拟交集操作"><a href="#3-1-2-模拟交集操作" class="headerlink" title="3.1.2 模拟交集操作"></a>3.1.2 模拟交集操作</h4><p>模拟交集操作需要创建一个辅助函数，来生成包含setA和setB都有的元素的新集合（行{1}）。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> intersection = <span class="function"><span class="keyword">function</span>(<span class="params">setA, setB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> setA) &#123;</span><br><span class="line">        <span class="keyword">if</span> (setB.has(x)) &#123; <span class="comment">//&#123;1&#125;</span></span><br><span class="line">            intersectionSet.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> intersectionAB = intersection(setA, setB);</span><br></pre></td></tr></table></figure><p>交集可以用更简单的语法实现，代码如下：</p><blockquote><p>intersectionAb = new Set([x for (x of setA) if (setB.has(x))]); </p></blockquote><p>这和intersection函数的效果完全一样。</p><h4 id="3-1-3-模拟差集操作"><a href="#3-1-3-模拟差集操作" class="headerlink" title="3.1.3 模拟差集操作"></a>3.1.3 模拟差集操作</h4><p>交集操作创建的集合包含setA和setB都有的元素，差集操作创建的集合包含的则是setA有而setB没有的元素。看下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> difference = <span class="function"><span class="keyword">function</span>(<span class="params">setA, setB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> setA) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!setB.has(x)) &#123; <span class="comment">//&#123;1&#125;</span></span><br><span class="line">            differenceSet.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> differenceSet;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> differenceAB = difference(setA, setB);</span><br></pre></td></tr></table></figure><p>intersection函数和difference函数只有行{1}不同，因为差集中只添加setA有而setB没有的元素。</p><p>差集也可以用更简单的语法实现，代码如下：</p><blockquote><p>differenceAB = new Set([x for (x of setA) if (!setB.has(x))]); </p></blockquote><p>目前只有Firefox支持简化的语法，但在所有支持ES6的现代浏览器中都可以执行difference函数</p><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><p>在这片文章中，我们学习了如何从头实现一个与ECMAScript 6中定义的类似的Set类。我们还介绍了在其他编程语言的集合数据结构的实现中不常见的一些方法，比如并集、交集、差集和子集。因此，相比于其他编程语言目前的Set实现，我们实现了一个非常完备的Set类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、构建数据集合&quot;&gt;&lt;a href=&quot;#一、构建数据集合&quot; class=&quot;headerlink&quot; title=&quot;一、构建数据集合&quot;&gt;&lt;/a&gt;一、构建数据集合&lt;/h2&gt;&lt;p&gt;集合是由一组无序且唯一（即不能重复）的项组成的。这个数据结构使用了与有限集合相同的数学概念，
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://www.23ybob.club/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript数据结构与算法五（链表）</title>
    <link href="https://www.23ybob.club/2019/02/26/cjsog2utp0013xsvbf9drz40u/"/>
    <id>https://www.23ybob.club/2019/02/26/cjsog2utp0013xsvbf9drz40u/</id>
    <published>2019-02-26T03:41:53.000Z</published>
    <updated>2019-02-28T02:57:46.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、链表数据结构"><a href="#一、链表数据结构" class="headerlink" title="一、链表数据结构"></a>一、链表数据结构</h2><p>要存储多个元素，数组（或列表）可能是最常用的数据结构。这种数据结构非常方便，提供了一个便利的[]语法来访问它的元素。然而，这种数据结构有一个缺点：（在大多数语言中）数组的大小是固定的，从数组的起点或中间插入或移除项的成本很高，因为需要移动元素（尽管JavaScript的array类方法做这些事，但背后的情况同样是这样）。</p><p>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。下图展示了一个链表的结构：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-01.png" alt="链表数据结构"></p><p>相对于传统的数组，链表的一个好处在于，添加或移除元素的时候不需要移动其他元素。然而，链表需要使用指针，因此实现链表时需要额外注意。数组的另一个细节是可以直接访问任何位置的任何元素，而要想访问链表中间的一个元素，需要从起点（表头）开始迭代列表直到找到所需的元素。</p><p>现实中也有一些链表的例子。第一个例子就是康加舞队。每个人是一个元素，手就是链向下一个人的指针。可以向队列中增加人——只需要找到想加入的点，断开连接，插入一个人，再重新连接起来。</p><p>另一个例子是寻宝游戏。你有一条线索，这条线索是指向寻找下一条线索的地点的指针。你顺着这条链接去下一个地点，得到另一条指向再下一处的线索。得到列表中间的线索的唯一办法，就是从起点（第一条线索）顺着列表寻找。</p><p>还有一个可能是用来说明链表的最流行的例子，那就是火车。一列火车是由一系列车厢（也称车皮）组成的。每节车厢或车皮都相互连接。你很容易分离一节车皮，改变它的位置，添加或移除它。下图演示了一列火车。每节车皮都是列表的元素，车皮间的连接就是指针：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-02.png" alt="链表数据结构"></p><h2 id="二、创建链表"><a href="#二、创建链表" class="headerlink" title="二、创建链表"></a>二、创建链表</h2><p>理解了链表是什么之后，现在就要开始实现我们的数据结构了，以下是我们的LinkedList类的骨架：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">    <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span> (<span class="params">position, element</span>) </span>&#123; &#125;; </span><br><span class="line">    <span class="keyword">this</span>.removeAt = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">this</span>.indexOf = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">this</span>.getHead = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LinkedList数据结构还需要一个Node辅助类（行{1}）。Node类表示要加入列表的项。它包含一个element属性，即要添加到列表的值，以及一个next属性，即指向列表中下一个节点项的指针。</p><p>LinkedList类也有存储列表项的数量的length属性（内部/私有变量）（行{2}）。</p><p>另一个重要的点是，我们还需要存储第一个节点的引用。为此，可以把这个引用存储在一个称为head的变量中（行{3}）</p><p>然后就是LinkedList类的方法。在实现这些方法之前，先来看看它们的职责。</p><ul><li>append(element)：向列表尾部添加一个新的项。</li><li>insert(position, element)：向列表的特定位置插入一个新的项。</li><li>remove(element)：从列表中移除一项。</li><li>indexOf(element)：返回元素在列表中的索引。如果列表中没有该元素则返回-1。</li><li>removeAt(position)：从列表的特定位置移除一项。</li><li>isEmpty()：如果链表中不包含任何元素，返回true，如果链表长度大于0则返回false。</li><li>size()：返回链表包含的元素个数。与数组的length属性类似。</li><li>toString()：由于列表项使用了Node类，就需要重写继承自JavaScript对象默认的toString方法，让其只输出元素的值。</li></ul><h3 id="2-1-向链表尾部追加元素"><a href="#2-1-向链表尾部追加元素" class="headerlink" title="2.1 向链表尾部追加元素"></a>2.1 向链表尾部追加元素</h3><p>向LinkedList对象尾部添加一个元素时，可能有两种场景：列表为空，添加的是第一个元素，或者列表不为空，向其追加元素。</p><p>下面是我们实现的append方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LinkedList类的骨架</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123; <span class="comment">// </span></span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>; <span class="comment">// </span></span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>; <span class="comment">// </span></span><br><span class="line">    <span class="comment">//实现LinkedList类的append方法</span></span><br><span class="line">    <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element), <span class="comment">//&#123;1&#125;</span></span><br><span class="line">            current; <span class="comment">//&#123;2&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (head === <span class="literal">null</span>) &#123; <span class="comment">//列表中第一个节点 //&#123;3&#125;</span></span><br><span class="line">            head = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = head; <span class="comment">//&#123;4&#125;</span></span><br><span class="line">            <span class="comment">//循环列表，直到找到最后一项</span></span><br><span class="line">            <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到最后一项，将其next赋为node，建立链接</span></span><br><span class="line">            current.next = node; <span class="comment">//&#123;5&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        length++; <span class="comment">//更新列表的长度 //&#123;6&#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先需要做的是把element作为值传入，创建Node项（行{1}）。</p><p>先来实现第一个场景：向为空的列表添加一个元素。当我们创建一个LinkedList对象时，head会指向null：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-03.png" alt="链表数据结构"></p><p>如果head元素为null（列表为空——行{3}），就意味着在向列表添加第一个元素。因此要做的就是让head元素指向node元素。下一个node元素将会自动成为null。</p><p>列表最后一个节点的下一个元素始终是null。</p><p>再来看看第二个场景，也就是向一个不为空的列表尾部添加元素。</p><p>要向列表的尾部添加一个元素，首先需要找到最后一个元素。记住，我们只有第一个元素的引用（行{4}），因此需要循环访问列表，直到找到最后一项。为此，我们需要一个指向列表中current项的变量（行{2}）。</p><p>循环访问列表时，当current.next元素为null时，我们就知道已经到达列表尾部了。然后要做的就是让当前（也就是最后一个）元素的next指针指向想要添加到列表的节点（行{5}）。下图展示了这个行为：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-04.png" alt="链表数据结构"></p><p>而当一个Node元素被创建时，它的next指针总是null。这没问题，因为我们知道它会是列表的最后一项。</p><p>当然，别忘了递增列表的长度，这样就能控制它，轻松地得到列表的长度（行{6}）。</p><p>我们可以通过以下代码来使用和测试目前创建的数据结构：</p><blockquote><p>let list = new LinkedList();<br>list.append(15);<br>list.append(10); </p></blockquote><h3 id="2-2-从链表中移除元素"><a href="#2-2-从链表中移除元素" class="headerlink" title="2.2 从链表中移除元素"></a>2.2 从链表中移除元素</h3><p>现在，让我们看看如何从LinkedList对象中移除元素。移除元素也有两种场景：第一种是移除第一个元素，第二种是移除第一个以外的任一元素。我们要实现两种remove方法：第一种是从特定位置移除一个元素，第二种是根据元素的值移除元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LinkedList类的骨架</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>; </span><br><span class="line">    <span class="comment">//实现LinkedList类的append方法</span></span><br><span class="line">    <span class="keyword">this</span>.removeAt = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//检查越界值</span></span><br><span class="line">        <span class="keyword">if</span> (position &gt; <span class="number">-1</span> &amp;&amp; position &lt; length) &#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">            <span class="keyword">let</span> current = head, <span class="comment">// &#123;2&#125;</span></span><br><span class="line">                previous, <span class="comment">// &#123;3&#125;</span></span><br><span class="line">                index = <span class="number">0</span>; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">            <span class="comment">//移除第一项</span></span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// &#123;5&#125;</span></span><br><span class="line">                head = current.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (index++ &lt; position) &#123; // &#123;6&#125;</span><br><span class="line">                    previous = current; // &#123;7&#125;</span><br><span class="line">                    current = current.next; // &#123;8&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //将previous与current的下一项链接起来：跳过current，从而移除它</span><br><span class="line">                previous.next = current.next; // &#123;9&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            length--; // &#123;10&#125;</span><br><span class="line">            return current.element;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null; // &#123;11&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一步一步来看这段代码。该方法要得到需要移除的元素的位置，就需要验证这个位置是有效的（行{1}）。从0（包括0）到列表的长度（size – 1，因为索引是从零开始的）都是有效的位置。如果不是有效的位置，就返回null（意即没有从列表中移除元素）。</p><p>首先为第一种场景编写代码：我们要从列表中移除第一个元素（position === 0——行{5}）。下图展示了这个过程：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-05.png" alt="链表数据结构"></p><p>因此，如果想移除第一个元素，要做的就是让head指向列表的第二个元素。我们将用current变量创建一个对列表中第一个元素的引用（行{2}——我们还会用它来迭代列表，但稍等一下再说）。这样current变量就是对列表中第一个元素的引用。如果把head赋为current.next，就会移除第一个元素</p><p>现在，假设我们要移除列表的最后一项或者中间某一项。为此，需要依靠一个细节来迭代列表，直到到达目标位置（行{6}——我们会使用一个用于内部控制和递增的index变量）：current变量总是为对所循环列表的当前元素的引用（行{8}）。我们还需要一个对当前元素的前一个元素的引用（行{7}）；它被命名为previous（行{3}）。</p><p>因此，要从列表中移除当前元素，要做的就是将previous.next和current.next链接起来（行{9}）。这样，当前元素就会被丢弃在计算机内存中，等着被垃圾回收器清除。</p><p>我们试着通过一些图表来更好地理解。首先考虑移除最后一个元素：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-06.png" alt="链表数据结构"></p><p>对于最后一个元素，当我们在行{6}跳出循环时，current变量将是对列表中最后一个元素的引用（要移除的元素）。current.next的值将是null（因为它是最后一个元素）。由于还保留了对previous元素的引用（当前元素的前一个元素），previous.next就指向了current。那么要移除current，要做的就是把previous.next的值改变为current.next。</p><p>现在来看看，对于列表中间的元素是否可以应用相同的逻辑：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-06.png" alt="链表数据结构"></p><p>current变量是对要移除元素的引用。previous变量是对要移除元素的前一个元素的引用。那么要移除current元素，需要做的就是将previous.next与current.next链接起来。因此，我们的逻辑对这两种情况都管用。</p><h3 id="2-3-在任意位置插入元素"><a href="#2-3-在任意位置插入元素" class="headerlink" title="2.3 在任意位置插入元素"></a>2.3 在任意位置插入元素</h3><p>接下来，我们要实现insert方法。使用这个方法可以在任意位置插入一个元素。我们来看一看它的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span> (<span class="params">position, element</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//检查越界值</span></span><br><span class="line">    <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length) &#123; <span class="comment">//&#123;1&#125;</span></span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">            current = head,</span><br><span class="line">            previous,</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">//在第一个位置添加</span></span><br><span class="line">            node.next = current; <span class="comment">//&#123;2&#125;</span></span><br><span class="line">            head = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (index++ &lt; position) &#123; //&#123;3&#125;</span><br><span class="line">                previous = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            node.next = current; //&#123;4&#125;</span><br><span class="line">            previous.next = node; //&#123;5&#125; </span><br><span class="line">        &#125;</span><br><span class="line">        length++; //更新列表的长度</span><br><span class="line">        return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return false; //&#123;6&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于我们处理的是位置，就需要检查越界值（行{1}，跟removeAt方法类似）。如果越界了，就返回false值，表示没有添加项到列表中（行{6}）。</p><p>现在我们要处理不同的场景。第一种场景，需要在列表的起点添加一个元素，也就是第一个位置。下图展示了这种场景：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-08.png" alt="insert图示"></p><p>current变量是对列表中第一个元素的引用。我们需要做的是把node.next的值设为current（列表中第一个元素）。现在head和node.next都指向了current。接下来要做的就是把head的引用改为node（行{2}），这样列表中就有了一个新元素。</p><p>现在来处理第二种场景：在列表中间或尾部添加一个元素。首先，我们需要循环访问列表，找到目标位置（行{3}）。当跳出循环时，current变量将是对想要插入新元素的位置之后一个元素的引用，而previous将是对想要插入新元素的位置之前一个元素的引用。在这种情况下，我们要在previous和current之间添加新项。因此，首先需要把新项（node）和当前项链接起来（行{4}），然后需要改变previous和current之间的链接。我们还需要让previous.next指向node（行{5}）。</p><p>我们通过一张图表来看看代码所做的事：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-09.png" alt="insert图示"></p><p>如果我们试图向最后一个位置添加一个新元素，previous将是对列表最后一项的引用，而current将是null。在这种情况下，node.next将指向current，而previous.next将指向node，这样列表中就有了一个新的项。</p><p>现在来看看如何向列表中间添加一个新元素：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-10.png" alt="insert图示"></p><p>在这种情况下，我们试图将新的项（node）插入到previous和current元素之间。首先，我们需要把node.next的值指向current。然后把previous.next的值设为node。这样列表中就有了一个新的项。</p><p>使用变量引用我们需要控制的节点非常重要，这样就不会丢失节点之间的链接。我们可以只使用一个变量（previous），但那样会很难控制节点之间的链接。由于这个原因，最好是声明一个额外的变量来帮助我们处理这些引用。</p><h3 id="2-4-实现链表的其他方法"><a href="#2-4-实现链表的其他方法" class="headerlink" title="2.4 实现链表的其他方法"></a>2.4 实现链表的其他方法</h3><h4 id="2-4-1-toString方法"><a href="#2-4-1-toString方法" class="headerlink" title="2.4.1 toString方法"></a>2.4.1 toString方法</h4><p>toString方法会把LinkedList对象转换成一个字符串。下面是toString方法的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> current = head, <span class="comment">//&#123;1&#125;</span></span><br><span class="line">        string = <span class="string">''</span>; <span class="comment">//&#123;2&#125;</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123; <span class="comment">//&#123;3&#125;</span></span><br><span class="line">        string += current.element + (current.next ? <span class="string">'n'</span> : <span class="string">''</span>);<span class="comment">//&#123;4&#125;</span></span><br><span class="line">        current = current.next; <span class="comment">//&#123;5&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> string; <span class="comment">//&#123;6&#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先，要循环访问列表中的所有元素，就需要有一个起点，也就是head。我们会把current变量当作索引（行{1}），控制循环访问列表。我们还需要初始化用于拼接元素值的变量（行{2}）。</p><p>接下来就是循环访问列表中的每个元素（行{3}）。我们要用current来检查元素是否存在（如果列表为空，或是到达列表中最后一个元素的下一位（null），while循环中的代码就不会执行）。然后我们就得到了元素的内容，将其拼接到字符串中（行{4}）。最后，继续迭代下一个元素（行{5}）。最后，返回列表内容的字符串（行{6}）。</p><h4 id="2-4-2-indexOf方法"><a href="#2-4-2-indexOf方法" class="headerlink" title="2.4.2 indexOf方法"></a>2.4.2 indexOf方法</h4><p>indexOf方法接收一个元素的值，如果在列表中找到它，就返回元素的位置，否则返回-1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> current = head, <span class="comment">//&#123;1&#125;</span></span><br><span class="line">    index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (current) &#123; <span class="comment">//&#123;2&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (element === current.element) &#123;</span><br><span class="line">            <span class="keyword">return</span> index; <span class="comment">//&#123;3&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        index++; <span class="comment">//&#123;4&#125;</span></span><br><span class="line">        current = current.next; <span class="comment">//&#123;5&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一如既往，我们需要一个变量来帮助我们循环访问列表，这个变量是current，它的初始值是head（列表的第一个元素——我们还需要一个index变量来计算位置数（行{1}））。然后循环访问元素（行{2}），检查当前元素是否是我们要找的。如果是，就返回它的位置（行{3}）；如果不是，就继续计数（行{4}），检查列表中下一个节点（行{5}）。</p><p>如果列表为空，或是到达列表的尾部（current = current.next将是null），循环就不会执行。如果没有找到值，就返回-1。</p><h4 id="2-4-3-remove方法"><a href="#2-4-3-remove方法" class="headerlink" title="2.4.3 remove方法"></a>2.4.3 remove方法</h4><p>实现了indexOf方法就可以实现remove方法了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="keyword">this</span>.indexOf(element);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.removeAt(index);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们已经有一个移除给定位置的一个元素的removeAt方法了。现在有了indexOf方法，如果传入元素的值，就能找到它的位置，然后调用removeAt方法并传入找到的位置。这样非常简<br>单，如果需要更改removeAt方法的代码，这样也更容易——两个方法都会被更改（这就是重用代码的妙处）。这样，我们就不需要维护两个从列表中移除一项的方法，只需要一个！同时，removeAt方法将会检查边界约束。</p><h4 id="2-4-4-isEmpty、size和getHead方法"><a href="#2-4-4-isEmpty、size和getHead方法" class="headerlink" title="2.4.4  isEmpty、size和getHead方法"></a>2.4.4  isEmpty、size和getHead方法</h4><p>isEmpty方法检查链表是否为空、size获取链表长度，这两个方法与队列中的isEmpty方法、size方法类似，如下实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> length === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果列表中没有元素，isEmpty方法就返回true，否则返回false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>size方法返回列表的length。和已经实现的Queue类、Stack类有所不同，列表的length是内部控制的，因为LinkedList是从头构建的。</p><p>最后还有getHead方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.getHead = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>head变量是LinkedList类的私有变量（这意味着它不能在LinkedList实例外部被访问和更改，只有通过LinkedList实例才可以）。但是，如果我们需要在类的外部循环访问列表，就需要提供一种获取类的第一个元素的方法。</p><h2 id="三、双向链表"><a href="#三、双向链表" class="headerlink" title="三、双向链表"></a>三、双向链表</h2><p>双向链表和普通链表的区别在于，在链表中，一个节点只有链向下一个节点的链接，而在双向链表中，链接是双向的：一个链向下一个元素，另一个链向前一个元素，如下图所示</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-11.png" alt="双向链表图示"></p><p>先从实现DoublyLinkedList类所需的变动开始</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DoublyLinkedList类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.prev = <span class="literal">null</span>; <span class="comment">//新增的</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> tail = <span class="literal">null</span>; <span class="comment">//新增的</span></span><br><span class="line">    <span class="comment">//这里是方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在代码中可以看到，LinkedList类和DoublyLinkedList类之间的区别标为新增的。在Node类里有prev属性（一个新指针），在DoublyLinkedList类里也有用来保存对列表最后一<br>项的引用的tail属性。</p><p>双向链表提供了两种迭代列表的方法：从头到尾，或者反过来。我们也可以访问一个特定节点的下一个或前一个元素。在单向链表中，如果迭代列表时错过了要找的元素，就需要回到列表起点，重新开始迭代。这是双向链表的一个优点。</p><h3 id="3-1-在任意位置插入新元素"><a href="#3-1-在任意位置插入新元素" class="headerlink" title="3.1 在任意位置插入新元素"></a>3.1 在任意位置插入新元素</h3><p>向双向链表中插入一个新项跟（单向）链表非常类似。区别在于，链表只要控制一个next指针，而双向链表则要同时控制next和prev（previous，前一个）这两个指针。</p><p>这是向任意位置插入一个新元素的算法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DoublyLinkedList类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.prev = <span class="literal">null</span>; <span class="comment">//新增的</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> tail = <span class="literal">null</span>; <span class="comment">//新增的</span></span><br><span class="line">    <span class="comment">//这里是方法</span></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span> (<span class="params">position, element</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//检查越界值</span></span><br><span class="line">        <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">                current = head,</span><br><span class="line">                previous,</span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">//在第一个位置添加</span></span><br><span class="line">                <span class="keyword">if</span> (!head) &#123; <span class="comment">//新增的 &#123;1&#125;</span></span><br><span class="line">                    head = node;</span><br><span class="line">                    tail = node;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node.next = current;</span><br><span class="line">                    current.prev = node; <span class="comment">//新增的 &#123;2&#125;</span></span><br><span class="line">                    head = node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === length) &#123; <span class="comment">//最后一项 //新增的</span></span><br><span class="line">                current = tail; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">                current.next = node;</span><br><span class="line">                node.prev = current;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (index++ &lt; position) &#123; //&#123;4&#125;</span><br><span class="line">                    previous = current;</span><br><span class="line">                    current = current.next;</span><br><span class="line">                &#125;</span><br><span class="line">                node.next = current; //&#123;5&#125;</span><br><span class="line">                previous.next = node;</span><br><span class="line">                current.prev = node; //新增的</span><br><span class="line">                node.prev = previous; //新增的</span><br><span class="line">            &#125;</span><br><span class="line">            length++; //更新列表的长度</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来分析第一种场景：在列表的第一个位置（列表的起点）插入一个新元素。如果列表为空（行{1}），只需要把head和tail都指向这个新节点。如果不为空，current变量将是对列表中第一个元素的引用。就像我们在链表中所做的，把node.next设为current，而head将指向node（它将成为列表中的第一个元素）。不同之处在于，我们还需要为指向上一个元素的指针设一个值。current.prev指针将由指向null变为指向新元素（node——行{2}）。node.prev指针已经是null，因此不需要再更新任何东西。下图演示了这个过程：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-12.png" alt="双向链表图示"></p><p>现在来分析一下，假如我们要在列表最后添加一个新元素。这是一个特殊情况，因为我们还控制着指向最后一个元素的指针（tail）。current变量将引用最后一个元素（行{3}）。然后开始建立第一个链接：node.prev将引用current。current.next指针（指向null）将指向node（由于构造函数，node.next已经指向了null）。然后只剩一件事了，就是更新tail，它将由指向current变为指向node。下图展示了这些行为：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-13.png" alt="双向链表图示"></p><p>然后还有第三种场景：在列表中间插入一个新元素。就像我们在之前的方法中所做的，迭代列表，直到到达要找的位置（行{4}）。我们将在current和previous元素之间插入新元素。首先，node.next将指向current（行{5}），而previous.next将指向node，这样就不会丢失节点之间的链接。然后需要处理所有的链接：current.prev将指向node，而node.prev将指向previous。下图展示了这一过程：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-14.png" alt="双向链表图示"></p><h3 id="3-2-从任意位置移除元素"><a href="#3-2-从任意位置移除元素" class="headerlink" title="3.2 从任意位置移除元素"></a>3.2 从任意位置移除元素</h3><p>从双向链表中移除元素跟链表非常类似。唯一的区别就是还需要设置前一个位置的指针。我们来看一下它的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.removeAt = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//检查越界值</span></span><br><span class="line">    <span class="keyword">if</span> (position &gt; <span class="number">-1</span> &amp;&amp; position &lt; length) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = head,</span><br><span class="line">            previous,</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//移除第一项</span></span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">            head = current.next; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">            <span class="comment">//如果只有一项，更新tail //新增的</span></span><br><span class="line">            <span class="keyword">if</span> (length === <span class="number">1</span>) &#123; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">                tail = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                head.prev = <span class="literal">null</span>; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === length - <span class="number">1</span>) &#123; <span class="comment">//最后一项 //新增的</span></span><br><span class="line">            current = tail; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">            tail = current.prev;</span><br><span class="line">            tail.next = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (index++ &lt; position) &#123; // &#123;5&#125;</span><br><span class="line">                previous = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            //将previous与current的下一项链接起来——跳过current</span><br><span class="line">            previous.next = current.next; // &#123;6&#125;</span><br><span class="line">            current.next.prev = previous; //新增的</span><br><span class="line">        &#125;</span><br><span class="line">        length--;</span><br><span class="line">        return current.element;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们需要处理三种场景：从头部、从中间和从尾部移除一个元素。</p><p>我们来看看如何移除第一个元素。current变量是对列表中第一个元素的引用，也就是我们想移除的元素。需要做的就是改变 head 的引用，将其从 current 改为下一个元素（current.next——行{1}）。但我们还需要更新current.next指向上一个元素的指针（因为第一个元素的prev指针是null）。因此，把head.prev的引用改为null（行{3}——因为head也指向列表中新的第一个元素，或者也可以用current.next.prev）。由于还需要控制tail的引用，我们可以检查要移除的元素是否是第一个元素，如果是，只需要把tail也设为null（行{2}）。</p><p>下图勾画了从双向链表移除第一个元素的过程：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-15.png" alt="双向链表图示"></p><p>下一种场景是从最后一个位置移除元素。既然已经有了对最后一个元素的引用（tail），我们就不需要为找到它而迭代列表。这样我们也就可以把tail的引用赋给current变量（行{4}）。接下来，需要把tail的引用更新为列表中倒数第二个元素（current.prev，或者tail.prev也可以）。既然tail指向了倒数第二个元素，我们就只需要把next指针更新为null（tail.next= null）。下图演示了这一行为：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-16.png" alt="双向链表图示"></p><p>第三种也是最后一种场景：从列表中间移除一个元素。首先需要迭代列表，直到到达要找的位置（行{5}）。current变量所引用的就是要移除的元素。那么要移除它，我们可以通过更新previous.next和current.next.prev的引用，在列表中跳过它。因此，previous.next将指向current.next，而current.next.prev将指向previous，如下图所示：</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-17.png" alt="双向链表图示"></p><h3 id="3-3-循环列表"><a href="#3-3-循环列表" class="headerlink" title="3.3 循环列表"></a>3.3 循环列表</h3><p>循环链表可以像链表一样只有单向引用，也可以像双向链表一样有双向引用。循环链表和链表之间唯一的区别在于，最后一个元素指向下一个元素的指针（tail.next）不是引用null，而是指向第一个元素（head），如下图所示。</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-18.png" alt="双向链表图示"></p><p>双向循环链表有指向head元素的tail.next，和指向tail元素的head.prev。</p><p><img src="/2019/02/26/cjsog2utp0013xsvbf9drz40u/LinkedList-19.png" alt="双向链表图示"></p><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><p>本篇文章主要介绍链表这种数据结构，及其变体双向链表和循环链表。我们学习了如何在任意位置添加和移除元素，以及如何循环访问链表。还学习了链表相比数组最重要的优点，那就是无需移动链表中的元素，就能轻松地添加和移除元素。因此，当我们需要添加和移除很多元素时，最好的选择就是链表，而非数组。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、链表数据结构&quot;&gt;&lt;a href=&quot;#一、链表数据结构&quot; class=&quot;headerlink&quot; title=&quot;一、链表数据结构&quot;&gt;&lt;/a&gt;一、链表数据结构&lt;/h2&gt;&lt;p&gt;要存储多个元素，数组（或列表）可能是最常用的数据结构。这种数据结构非常方便，提供了一个便利的
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://www.23ybob.club/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript数据结构与算法四（队列）</title>
    <link href="https://www.23ybob.club/2019/02/20/cjsog2upk000sxsvbk1oihnqm/"/>
    <id>https://www.23ybob.club/2019/02/20/cjsog2upk000sxsvbk1oihnqm/</id>
    <published>2019-02-20T08:31:39.000Z</published>
    <updated>2019-02-25T10:42:41.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、队列数据结构"><a href="#一、队列数据结构" class="headerlink" title="一、队列数据结构"></a>一、队列数据结构</h2><p>队列是遵循FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。</p><p>在现实中，最常见的队列的例子就是排队：</p><p><img src="/2019/02/20/cjsog2upk000sxsvbk1oihnqm/queue-01.png" alt="队列排队案例"></p><h3 id="1-1-创建队列"><a href="#1-1-创建队列" class="headerlink" title="1.1 创建队列"></a>1.1 创建队列</h3><p>首先需要创建自己的类表示队列，先从最基本的声明开始：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quene</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//这里是属性和方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先需要一个用于存储队列中元素的数据结构。我们可以使用数组，就像在Stack类中那样使用（你会发现Queue类和Stack类非常类似，只是添加和移除元素的原则不同）：</p><blockquote><p>let items = [];</p></blockquote><p>接下来需要声明一些队列可用的方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enqueue(element(s))：向队列尾部添加一个（或多个）新的项。</span><br><span class="line"></span><br><span class="line">dequeue()：移除队列的第一（即排在队列最前面的）项，并返回被移除的元素。</span><br><span class="line"></span><br><span class="line">front()：返回队列中第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动（不移除元素，只返回元素信息——与Stack类的peek方法非常类似）。</span><br><span class="line"></span><br><span class="line">isEmpty()：如果队列中不包含任何元素，返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。</span><br><span class="line"></span><br><span class="line">size()：返回队列包含的元素个数，与数组的length属性类似。</span><br></pre></td></tr></table></figure><h3 id="1-2-向队列添加元素"><a href="#1-2-向队列添加元素" class="headerlink" title="1.2 向队列添加元素"></a>1.2 向队列添加元素</h3><p>首先要实现的是enqueue方法。这个方法负责向队列添加新元素。这里有一个非常重要的细节，新的项只能添加到队列末尾：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    items.push(element);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-2-从队列移除元素"><a href="#1-2-从队列移除元素" class="headerlink" title="1.2 从队列移除元素"></a>1.2 从队列移除元素</h3><p>接下来要实现dequeue方法。这个方法负责从队列移除项。由于队列遵循先进先出原则，最先添加的项也是最先被移除的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.shift();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只有enqueue方法和dequeue方法可以添加和移除元素，这样就确保了Queue类遵循先进先出原则。</p><h3 id="1-3-查看队列头元素"><a href="#1-3-查看队列头元素" class="headerlink" title="1.3 查看队列头元素"></a>1.3 查看队列头元素</h3><p>现在来为我们的类实现一些额外的辅助方法。如果想知道队列最前面的项是什么，可以用front方法。这个方法会返回队列最前面的项（数组的索引为0）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-4-检查队列是否为空"><a href="#1-4-检查队列是否为空" class="headerlink" title="1.4 检查队列是否为空"></a>1.4 检查队列是否为空</h3><p>下一个是isEmpty方法。如果队列为空，它会返回true，否则返回false（注意这个方法和Stack类里的一样）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于isEmpty方法，可以简单地验证内部数组的length是否为0。</p><p>我们也可以为Queue类实现类似于array类的length属性的方法。size方法也跟Stack类里的一样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-5-打印队列元素"><a href="#1-5-打印队列元素" class="headerlink" title="1.5 打印队列元素"></a>1.5 打印队列元素</h3><p>我们的Queue类已经实现好了。为了方便也可以像Stack类一样增加一个print方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(items.toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-6-使用quene类"><a href="#1-6-使用quene类" class="headerlink" title="1.6 使用quene类"></a>1.6 使用quene类</h3><p>首先要做的是实例化我们刚刚创建的Queue类，然后就可以验证它为空（输出为true，因为我们还没有向队列添加任何元素）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> items = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.shift();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(items.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty()); <span class="comment">//输出true</span></span><br></pre></td></tr></table></figure><p>接下来，添加一些元素（添加”John”和”Jack”两个元素——你可以向队列添加任何类型的元素）：</p><blockquote><p>queue.enqueue(“John”);</p></blockquote><blockquote><p>queue.enqueue(“Jack”); </p></blockquote><p>添加另一个元素：</p><pre><code>queue.enqueue(&quot;Camila&quot;); </code></pre><p>再执行一些其他的命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">queue.print(); <span class="comment">//["John", "Jack", "Camila"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queue.size()); <span class="comment">//输出3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty()); <span class="comment">//输出false</span></span><br><span class="line"></span><br><span class="line">queue.dequeue(); <span class="comment">//"John"</span></span><br><span class="line"></span><br><span class="line">queue.dequeue(); <span class="comment">//"Jack"</span></span><br><span class="line"></span><br><span class="line">queue.print();   <span class="comment">//["Camila"]</span></span><br></pre></td></tr></table></figure><p>如果打印队列的内容，就会得到John、Jack和Camila这三个元素。因为我们向队列添加了三个元素，所以队列的大小为3（当然也就不为空了）。</p><p>下图展示了目前为止执行的所有入列操作，以及队列当前的状态：</p><p><img src="/2019/02/20/cjsog2upk000sxsvbk1oihnqm/queue-02.png" alt="队列添加元素"></p><p>然后，出列两个元素（执行两次dequeue方法）。下图展示了dequeue方法的执行过程：</p><p><img src="/2019/02/20/cjsog2upk000sxsvbk1oihnqm/queue-03.png" alt="队列添加元素"></p><p>最后，再次打印队列内容时，就只剩Camila一个元素了。前两个入列的元素出列了，最后入列的元素也将是最后出列的。也就是说，我们遵循了先进先出原则。</p><h2 id="二、用ECMAscript6语法实现的Queue类"><a href="#二、用ECMAscript6语法实现的Queue类" class="headerlink" title="二、用ECMAscript6语法实现的Queue类"></a>二、用ECMAscript6语法实现的Queue类</h2><p>和Stack类一样，我们也可以用ECMAScript 6语法编写Queue类。在这种方法中，我们要用一个WeakMap来保存私有属性items，并用外层函数（闭包）来封装Queue类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Queue = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>() &#123;</span><br><span class="line">            items.set(<span class="keyword">this</span>, []);</span><br><span class="line">        &#125;</span><br><span class="line">        enqueue(element) &#123;</span><br><span class="line">            items.get(<span class="keyword">this</span>).push(element)</span><br><span class="line">            <span class="keyword">return</span> items.get(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dequeue() &#123;</span><br><span class="line">            items.get(<span class="keyword">this</span>).shift();</span><br><span class="line">            <span class="keyword">return</span> items.get(<span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Queue</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"><span class="built_in">console</span>.log(queue.enqueue(<span class="number">10</span>)); <span class="comment">//[10]</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.enqueue(<span class="number">11</span>)); <span class="comment">//[10,11]</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.dequeue());   <span class="comment">//[11]</span></span><br></pre></td></tr></table></figure><h2 id="三、优先队列"><a href="#三、优先队列" class="headerlink" title="三、优先队列"></a>三、优先队列</h2><p>队列大量应用在计算机科学以及我们的生活中，我们在之前话题中实现的默认队列也有一些修改版本。</p><p>其中一个修改版就是优先队列。元素的添加和移除是基于优先级的。一个现实的例子就是机场登机的顺序。头等舱和商务舱乘客的优先级要高于经济舱乘客。在有些国家，老年人和妇（或带小孩的妇女）登机时也享有高于其他乘客的优先级。</p><p>另一个现实中的例子是医院的（急诊科）候诊室。医生会优先处理病情比较严重的患者。通常，护士会鉴别分类，根据患者病情的严重程度放号。</p><p>实现一个优先队列，有两种选项：设置优先级，然后在正确的位置添加元素；或者用入列操作添加元素，然后按照优先级移除它们。在这个示例中，我们将会在正确的位置添加元素，因此可以对它们使用默认的出列操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> items = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">QueueElement</span>(<span class="params">element, priority</span>) </span>&#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span> (<span class="params">element, priority</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(items)</span><br><span class="line">        <span class="keyword">let</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</span><br><span class="line">        <span class="keyword">let</span> added = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (queueElement.priority &lt; items[i].priority) &#123; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">                items.splice(i, <span class="number">0</span>, queueElement); <span class="comment">// &#123;3&#125;</span></span><br><span class="line">                added = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">            items.push(queueElement); <span class="comment">//&#123;5&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;items[i].element&#125;</span> -</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;items[i].priority&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//其他方法和默认的Queue实现相同</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line">priorityQueue.enqueue(<span class="string">"John"</span>, <span class="number">2</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"Jack"</span>, <span class="number">1</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"Camila"</span>, <span class="number">1</span>);</span><br><span class="line">priorityQueue.print();</span><br></pre></td></tr></table></figure><p>默认的Queue类和PriorityQueue类实现上的区别是，要向PriorityQueue添加元素，需要创建一个特殊的元素（行{1}）。这个元素包含了要添加到队列的元素（它可以是任意类型）及其在队列中的优先级。</p><p>如果队列为空，可以直接将元素入列（行{2}）。否则，就需要比较该元素与其他元素的优先级。当找到一个比要添加的元素的priority值更大（优先级更低）的项时，就把新元素插入到它之前（根据这个逻辑，对于其他优先级相同，但是先添加到队列的元素，我们同样遵循先进先出的原则）。要做到这一点，我们可以用第2章学习过的JavaScript的array类的splice方法。一旦找到priority值更大的元素，就插入新元素（行{3}）并终止队列循环（行{4}）。这样，队列也就根据优先级排序了。</p><p>如果要添加元素的priority值大于任何已有的元素，把它添加到队列的末尾就行了（行{5}）:</p><blockquote><p>let priorityQueue = new PriorityQueue();<br>priorityQueue.enqueue(“John”, 2);<br>priorityQueue.enqueue(“Jack”, 1);<br>priorityQueue.enqueue(“Camila”, 1);<br>priorityQueue.print(); </p></blockquote><p>以上代码是一个使用PriorityQueue类的示例。在下图中可以看到每条命令的结果（以上代码的结果）</p><p><img src="/2019/02/20/cjsog2upk000sxsvbk1oihnqm/queue-04.png" alt="优先队列执行过程"></p><p>第一个被添加的元素是优先级为2的John。因为此前队列为空，所以它是队列中唯一的元素。接下来，添加了优先级为1的Jack。由于Jack的优先级高于John，它就成了队列中的第一个元素。然后，添加了优先级也为1的Camila。Camila的优先级和Jack相同，所以它会被插入到Jack之后（因为Jack先被插入队列）；Camila的优先级高于John，所以它会被插入到John之前。</p><p>我们在这里实现的优先队列称为最小优先队列，因为优先级的值较小的元素被放置在队列最前面（1代表更高的优先级）。最大优先队列则与之相反，把优先级的值较大的元素放置在队列最前面。</p><h2 id="四、循环队列——击鼓传花"><a href="#四、循环队列——击鼓传花" class="headerlink" title="四、循环队列——击鼓传花"></a>四、循环队列——击鼓传花</h2><p>还有另一个修改版的队列实现，就是循环队列。循环队列的一个例子就是击鼓传花游戏（HotPotato）。在这个游戏中，孩子们围成一个圆圈，把花尽快地传递给旁边的人。某一时刻传花停止，这个时候花在谁手里，谁就退出圆圈结束游戏。重复这个过程，直到只剩一个孩子（胜者）。</p><p>在下面这个示例中，我们要实现一个模拟的击鼓传花游戏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Queue = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>() &#123;</span><br><span class="line">            items.set(<span class="keyword">this</span>, []);</span><br><span class="line">        &#125;</span><br><span class="line">        enqueue(element) &#123;</span><br><span class="line">            <span class="keyword">return</span> items.get(<span class="keyword">this</span>).push(element)</span><br><span class="line">            <span class="comment">// return items.get(this);</span></span><br><span class="line">        &#125;</span><br><span class="line">        dequeue() &#123;</span><br><span class="line">            <span class="keyword">return</span> items.get(<span class="keyword">this</span>).shift();</span><br><span class="line">            <span class="comment">// return items.get(this);</span></span><br><span class="line">        &#125;</span><br><span class="line">        size() &#123;</span><br><span class="line">            <span class="keyword">return</span> items.get(<span class="keyword">this</span>).length;</span><br><span class="line">        &#125;</span><br><span class="line">        print() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(items.get(<span class="keyword">this</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Queue</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hotPotato</span>(<span class="params">nameList, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue(); <span class="comment">// &#123;1&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nameList.length; i++) &#123;</span><br><span class="line">        queue.enqueue(nameList[i]); <span class="comment">// &#123;2&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> eliminated = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            queue.enqueue(queue.dequeue()); <span class="comment">// &#123;3&#125; John</span></span><br><span class="line">            queue.print()</span><br><span class="line">        &#125;</span><br><span class="line">        eliminated = queue.dequeue();<span class="comment">// &#123;4&#125;  //</span></span><br><span class="line">        <span class="built_in">console</span>.log(eliminated + <span class="string">'在击鼓传花游戏中被淘汰。'</span>); <span class="comment">//Camila,Jack,Carl,Ingrid</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.dequeue();<span class="comment">// &#123;5&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">'John'</span>, <span class="string">'Jack'</span>, <span class="string">'Camila'</span>, <span class="string">'Ingrid'</span>, <span class="string">'Carl'</span>]; </span><br><span class="line"><span class="keyword">let</span> winner = hotPotato(names, <span class="number">7</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'The winner is: '</span> + winner); <span class="comment">//The winner is: John</span></span><br></pre></td></tr></table></figure><p>实现一个模拟的击鼓传花游戏，要用到实现的Queue类（行{1}）。我们会得到一份名单，把里面的名字全都加入队列（行{2}）。给定一个数字，然后迭代队列。从队列开头移除一项，再将其添加到队列末尾（行{3}），模拟击鼓传花（如果你把花传给了旁边的人，你被淘汰的威胁立刻就解除了）。一旦传递次数达到给定的数字，拿着花的那个人就被淘汰了（从队列中移除——行{4}）。最后只剩下一个人的时候，这个人就是胜者（行{5}）。</p><p>以上算法的输出如下：</p><blockquote><p>Camila在击鼓传花游戏中被淘汰。<br>Jack在击鼓传花游戏中被淘汰。<br>Carl在击鼓传花游戏中被淘汰。<br>Ingrid在击鼓传花游戏中被淘汰。<br>胜利者：John </p></blockquote><p>下图模拟了这个输出过程：</p><p><img src="/2019/02/20/cjsog2upk000sxsvbk1oihnqm/queue-05.png" alt="击鼓传花游戏算法"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、队列数据结构&quot;&gt;&lt;a href=&quot;#一、队列数据结构&quot; class=&quot;headerlink&quot; title=&quot;一、队列数据结构&quot;&gt;&lt;/a&gt;一、队列数据结构&lt;/h2&gt;&lt;p&gt;队列是遵循FIFO（First In First Out，先进先出，也称为先来先服务）原则的
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://www.23ybob.club/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript数据结构与算法三（栈）</title>
    <link href="https://www.23ybob.club/2019/02/19/cjsog2upb000mxsvb3wy974fe/"/>
    <id>https://www.23ybob.club/2019/02/19/cjsog2upb000mxsvb3wy974fe/</id>
    <published>2019-02-19T06:24:31.000Z</published>
    <updated>2019-02-20T08:24:55.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、栈数据结构"><a href="#一、栈数据结构" class="headerlink" title="一、栈数据结构"></a>一、栈数据结构</h2><p>栈是一种遵从后进先出(LIFO)原则的有序数据集合。新添加的或者待删除的元素保存在栈的同一端称为栈顶，另一端称为栈底。在栈里新添加的元素都靠近栈顶，旧添加的元素都接近栈底</p><h3 id="1-1-创建栈"><a href="#1-1-创建栈" class="headerlink" title="1.1 创建栈"></a>1.1 创建栈</h3><p>先创建一个类表示栈，先声明一个类：</p><pre><code>function Stack() {    //各种属性和方法的声明} </code></pre><p>首先，我们需要一种数据结构来保存栈里的元素。可以选择数组：</p><pre><code>let items = [];</code></pre><p>接下来，要为我们的栈声明一些方法。</p><ul><li>push(element(s))：添加一个（或几个）新元素到栈顶。</li><li>pop()：移除栈顶的元素，同时返回被移除的元素。</li><li>peek()：返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返回它）。</li><li>isEmpty()：如果栈里没有任何元素就返回true，否则返回false。</li><li>clear()：移除栈里的所有元素。</li><li>size()：返回栈里的元素个数。这个方法和数组的length属性很类似。</li></ul><h3 id="1-2-像栈中添加元素"><a href="#1-2-像栈中添加元素" class="headerlink" title="1.2 像栈中添加元素"></a>1.2 像栈中添加元素</h3><p>我们要实现的第一个方法是push。这个方法负责往栈里添加新元素，有一点很重要：该方法只添加元素到栈顶，也就是栈的末尾。push方法可以这样写：</p><pre><code>this.push = function(element){    items.push(element);}; </code></pre><h3 id="1-3-从栈中移除元素"><a href="#1-3-从栈中移除元素" class="headerlink" title="1.3 从栈中移除元素"></a>1.3 从栈中移除元素</h3><p>接着，我们来实现pop方法。这个方法主要用来移除栈里的元素。栈遵从LIFO原则，因此移出的是最后添加进去的元素。因此，我们可以用数组的pop方法。栈的pop方法可以这样写：</p><pre><code>this.pop = function(){    return items.pop();}; </code></pre><h3 id="1-4-查看栈顶元素"><a href="#1-4-查看栈顶元素" class="headerlink" title="1.4 查看栈顶元素"></a>1.4 查看栈顶元素</h3><p>现在，为我们的类实现一些额外的辅助方法。如果想知道栈里最后添加的元素是什么，可以用peek方法。这个方法将返回栈顶的元素：</p><pre><code>this.peek = function(){    return items[items.length-1];}; </code></pre><h3 id="1-5-检测栈是否为空"><a href="#1-5-检测栈是否为空" class="headerlink" title="1.5 检测栈是否为空"></a>1.5 检测栈是否为空</h3><p>下一个要实现的方法是 isEmpty，如果栈为空的话将返回true，否则就返回false：</p><pre><code>this.isEmpty = function(){    return items.length == 0;};</code></pre><p>使用isEmpty方法，我们能简单地判断内部数组的长度是否为0。</p><p>类似于数组的length属性，我们也能实现栈的length。对于集合，最好用size代替length。因为栈的内部使用数组保存元素，所以能简单地返回栈的长度：</p><pre><code>this.size = function(){    return items.length;}; </code></pre><h3 id="1-6-清空和打印栈元素"><a href="#1-6-清空和打印栈元素" class="headerlink" title="1.6 清空和打印栈元素"></a>1.6 清空和打印栈元素</h3><p>最后，我们来实现clear方法。clear方法用来移除栈里所有的元素，把栈清空。实现这个方法最简单的方式是：</p><pre><code>this.clear = function(){    items = [];}; </code></pre><p>另外也可以多次调用pop方法，把数组中的元素全部移除，这样也能实现clear方法。</p><p>如下案例，为了检查栈里的内容，实现一个辅助方法print。它会把栈里的元素都输出到控制台：</p><pre><code>this.print = function(){    console.log(items.toString());}; </code></pre><h3 id="1-7-使用Stack类"><a href="#1-7-使用Stack类" class="headerlink" title="1.7 使用Stack类"></a>1.7 使用Stack类</h3><p>首先，我们需要初始化Stack类。然后，验证一下栈是否为空（输出是true，因为还没有往栈里添加元素）。</p><pre><code>function Stack(){    this.push = function (element) {        return items.push(element)    }    this.pop = function () {        return items.pop();    };     this.peek = function () {        return items[items.length - 1];    };     this.isEmpty = function () {        return items.length == 0;    };     this.size = function () {        return items.length;    };     this.clear = function(){        items = [];    };     this.print = function(){        console.log(items.toString());    }; }let items = [];let stack = new Stack();console.log(stack.isEmpty());  //true</code></pre><p>接下来，往栈里添加一些元素（这里我们添加数字5和8；你可以添加任意类型的元素）: </p><pre><code>Stack.push(5);Stack.push(8);</code></pre><p>如果调用peek方法，将会输出8，因为它是往栈里添加的最后一个元素：</p><pre><code>console.log(stack.peek()); //输出8 </code></pre><p>再添加一个元素：</p><pre><code>stack.push(11);console.log(stack.size()); //输出3console.log(stack.isEmpty()); //输出false </code></pre><p>我们往栈里添加了11。如果调用size方法，输出为3，因为栈里有三个元素（5、8和11）。如果我们调用isEmpty方法，会看到输出了false（因为栈里有三个元素，不是空栈）。最后，我们再添加一个元素：</p><pre><code>stack.push(15); </code></pre><p>下图描绘了目前为止我们对栈的操作，以及栈的当前状态：</p><p><img src="/2019/02/19/cjsog2upb000mxsvb3wy974fe/stack-01.png" alt="栈状态描述"></p><p>然后，调用两次pop方法从栈里移除2个元素：</p><pre><code>stack.pop();stack.pop();console.log(stack.size()); //输出2stack.print(); //输出[5, 8] </code></pre><p>在两次调用pop方法前，我们的栈里有四个元素。调用两次后，现在栈里仅剩下5和8了。下图描绘这个过程的执行：</p><p><img src="/2019/02/19/cjsog2upb000mxsvb3wy974fe/stack-02.png" alt="栈状态描述"></p><h2 id="二、ECMAScript-6-和-Stack-类"><a href="#二、ECMAScript-6-和-Stack-类" class="headerlink" title="二、ECMAScript 6 和 Stack 类"></a>二、ECMAScript 6 和 Stack 类</h2><h3 id="2-1-用-ES6-语法声明-Stack-类"><a href="#2-1-用-ES6-语法声明-Stack-类" class="headerlink" title="2.1 用 ES6 语法声明 Stack 类"></a>2.1 用 ES6 语法声明 Stack 类</h3><pre><code>class Stack {    constructor () {        this.items = []; //{1}    }    push(element){        this.items.push(element);    }    //其他方法} </code></pre><p>我们只是用ES6的简化语法把Stack函数转换成Stack类。这种方法不能像其他语言（Java、C++、C#）一样直接在类里面声明变量，只能在类的构造函数constructor里声明（行{1}，在类的其他函数里用this.nameofVariable就可以引用这个变量。</p><p>尽管代码看起来更简洁、更漂亮，变量items却是公共的。ES6的类是基于原型的。虽然基于原型的类比基于函数的类更节省内存，也更适合创建多个实例，却不能够声明私有属性（变量）或方法。而且，在这种情况下，我们希望Stack类的用户只能访问暴露给类的方法。否则，就有可能从栈的中间移除元素（因为我们用数组来存储其值），这不是我们希望看到的。</p><h4 id="2-1-1-用ES6的限定作用域Symbol实现类"><a href="#2-1-1-用ES6的限定作用域Symbol实现类" class="headerlink" title="2.1.1 用ES6的限定作用域Symbol实现类"></a>2.1.1 用ES6的限定作用域Symbol实现类</h4><p>ES6新增了一种叫作Symbol的基本类型，它是不可变的，可以用作对象的属性。</p><pre><code>let _items = Symbol(); //{1}class Stack {    constructor () {        this[_items] = []; //{2}    }    //Stack方法} </code></pre><p>在上面的代码中，我们声明了Symbol类型的变量_items（行{1}），在类的constructor函数中初始化它的值（行{2}）。要访问_items，只需把所有的this.items都换成this[_items]。 </p><p>这种方法创建了一个假的私有属性，因为ES6新增的Object.getOwnPropertySymbols方法能够取到类里面声明的所有Symbols属性。下面是一个破坏Stack类的例子：</p><pre><code>let _items = Symbol(); class Stack {    constructor() {        this[_items] = [];     }    push(element) {        return this[_items].push(element);    };    print() {        console.log(this[_items].toString());    };} let stack = new Stack();stack.push(5);stack.push(8);let objectSymbols = Object.getOwnPropertySymbols(stack);console.log(objectSymbols.length); // 1console.log(objectSymbols); // [Symbol()]console.log(objectSymbols[0]); // Symbol()stack[objectSymbols[0]].push(1); stack.print(); //输出 5, 8, 1</code></pre><p>从以上代码可以看到，访问stack[objectSymbols[0]]是可以得到_items的。并且，_items属性是一个数组，可以进行任意的数组操作，比如从中间删除或添加元素。我们操作的是栈，不应该出现这种行为。</p><h4 id="2-1-2-用ES6的WeakMap实现类"><a href="#2-1-2-用ES6的WeakMap实现类" class="headerlink" title="2.1.2 用ES6的WeakMap实现类"></a>2.1.2 用ES6的WeakMap实现类</h4><p>有一种数据类型可以确保属性是私有的，这就是WeakMap。WeakMap可以存储键值对，其中键是对象，值可以是任意数据类型。</p><p>如果用WeakMap来存储items变量，Stack类就是这样的：</p><pre><code>const items = new WeakMap(); //{1}class Stack {    constructor () {        items.set(this, []); //{2}    }    push(element) {        let s = items.get(this); //{3}        s.push(element);    }    pop() {        let s = items.get(this);        let r = s.pop();        return r;    }    //其他方法} //行{1}，声明一个WeakMap类型的变量items。//行{2}，在constructor中，以this（Stack类自己的引用）为键，把代表栈的数组存入items。//行{3}，从WeakMap中取出值，即以this为键（行{2}设置的）从items中取值。</code></pre><p>现在我们知道，items在Stack类里是真正的私有属性了，但还有一件事要做。items现在仍然是在Stack类以外声明的，因此谁都可以改动它。我们要用一个闭包（外层函数）把Stack类包起来，这样就只能在这个函数里访问WeakMap：</p><pre><code>let Stack = (function () {    const items = new WeakMap();    class Stack {        constructor () {            items.set(this, []);        }        //其他方法    }     return Stack; //{5}})(); //当Stack函数里的构造函数被调用时，会返回Stack类的一个实例（行{5}）。</code></pre><p>现在，Stack类有一个名为items的私有属性。虽然它很丑陋，但毕竟实现了私有属性。然而，用这种方法的话，扩展类无法继承私有属性。鱼与熊掌不可兼得！</p><p>把上面的代码跟本章最初实现的Stack类做个比较，我们会发现有一些相似之处：</p><pre><code>function Stack() {    let items = [];    //其他方法} </code></pre><p>事实上，尽管ES6引入了类的语法，我们仍然不能像在其他编程语言中一样声明私有属性或方法。有很多种方法都可以达到相同的效果，但无论是语法还是性能，这些方法都有各自的优点和缺点</p><p>哪种方法更好？这取决于你在实际项目中如何使用本书中这些算法，要处理的数据量，要创建的实例个数，以及其他约束条件。最终，还是取决于你。</p><h3 id="2-2-用栈解决问题"><a href="#2-2-用栈解决问题" class="headerlink" title="2.2 用栈解决问题"></a>2.2 用栈解决问题</h3><p>栈的实际应用非常广泛。在回溯问题中，它可以存储访问过的任务或路径、撤销的操作（后续再讨论图和回溯问题时，我们会学习如何应用这个例子）。Java和C#用栈来存储变量和方法调用，特别是处理递归算法时，有可能抛出一个栈溢出异常。</p><h4 id="2-2-1-从十进制到二进制"><a href="#2-2-1-从十进制到二进制" class="headerlink" title="2.2.1 从十进制到二进制"></a>2.2.1 从十进制到二进制</h4><p>现实生活中，我们主要使用十进制。但在计算科学中，二进制非常重要，因为计算机里的所有内容都是用二进制数字表示的（0和1）。没有十进制和二进制相互转化的能力，与计算机交流就很困难。</p><p>要把十进制转化成二进制，我们可以将该十进制数字和2整除（二进制是满二进一），直到结果是0为止。举个例子，把十进制的数字10转化成二进制的数字，过程大概是这样：</p><p><img src="/2019/02/19/cjsog2upb000mxsvb3wy974fe/stack-03.png" alt="十进制转二进制"></p><p>大学的计算机课一般都会先教这个进制转换。下面是对应的算法描述：</p><pre><code>let Stack = (function () {    const items = new WeakMap();    class Stack {        constructor() {            items.set(this, []);        }        push(element) {            items.get(this).push(element);        }        pop() {            return items.get(this).pop();        }        isEmpty() {            return items.get(this).length == 0;        };    }    return Stack; })();function divideBy2(decNumber) {    var remStack = new Stack(),        rem,        binaryString = &apos;&apos;;    while (decNumber &gt; 0) { //{1}        rem = Math.floor(decNumber % 2); //{2}        remStack.push(rem); //{3}        decNumber = Math.floor(decNumber / 2); //{4}    }    while (!remStack.isEmpty()) {         binaryString += remStack.pop().toString(); //{5}    }    return binaryString;} console.log(divideBy2(13)); //1101</code></pre><p>在这段代码里，当结果满足和2做整除的条件时（行{2}），我们会获得当前结果和2的余数，放到栈里（行{2}、{3}）。然后让结果和2做整除（行{4}）。另外请注意：JavaScript有数字类型，但是它不会区分究竟是整数还是浮点数。因此，要使用Math.floor函数让除法的操作仅返回整数部分。最后，用pop方法把栈中的元素都移除，把出栈的元素变成连接成字符串（行{5}）。</p><h4 id="2-2-2-进制转换算法"><a href="#2-2-2-进制转换算法" class="headerlink" title="2.2.2 进制转换算法"></a>2.2.2 进制转换算法</h4><p>我们很容易修改之前的算法，使之能把十进制转换成任何进制。除了让十进制数字和2整除转成二进制数，还可以传入其他任意进制的基数为参数，就像下面算法这样：</p><pre><code>let Stack = (function () {    const items = new WeakMap();    class Stack {        constructor() {            items.set(this, []);        }        push(element) {            items.get(this).push(element);        }        pop() {            return items.get(this).pop()        }        isEmpty() {            return items.get(this).length == 0;        };    }    return Stack; //{5}})();function baseConverter(decNumber, base) {    var remStack = new Stack(),        rem,        baseString = &apos;&apos;,        digits = &apos;0123456789ABCDEF&apos;; //{6}    while (decNumber &gt; 0) {        rem = Math.floor(decNumber % base);        remStack.push(rem);        decNumber = Math.floor(decNumber / base);    }    while (!remStack.isEmpty()) {        baseString += digits[remStack.pop()]; //{7}    }    return baseString;} console.log(baseConverter(13,2)); //1101console.log(baseConverter(13,8)); //15</code></pre><p>我们只需要改变一个地方。在将十进制转成二进制时，余数是0或1；在将十进制转成八进制时，余数是0到7之间的数；但是将十进制转成16进制时，余数是0到9之间的数字加上A、B、C、D、E和F（对应10、11、12、13、14和15）。因此，我们需要对栈中的数字做个转化才可以（行{6}和行{7}）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、栈数据结构&quot;&gt;&lt;a href=&quot;#一、栈数据结构&quot; class=&quot;headerlink&quot; title=&quot;一、栈数据结构&quot;&gt;&lt;/a&gt;一、栈数据结构&lt;/h2&gt;&lt;p&gt;栈是一种遵从后进先出(LIFO)原则的有序数据集合。新添加的或者待删除的元素保存在栈的同一端称为栈顶
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://www.23ybob.club/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript数据结构与算法二（数组的使用）</title>
    <link href="https://www.23ybob.club/2019/02/14/cjsog2uq8000zxsvb4x86m52t/"/>
    <id>https://www.23ybob.club/2019/02/14/cjsog2uq8000zxsvb4x86m52t/</id>
    <published>2019-02-14T06:24:31.000Z</published>
    <updated>2019-02-19T03:36:59.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建和初始化数组"><a href="#一、创建和初始化数组" class="headerlink" title="一、创建和初始化数组"></a>一、创建和初始化数组</h3><h4 id="1-1-创建数组"><a href="#1-1-创建数组" class="headerlink" title="1.1 创建数组"></a>1.1 创建数组</h4><p>用JavaScript声明、创建和初始化数组有两种方式</p><pre><code>//使用new创建数组var daysOfWeek = new Array(); //{1}var daysOfWeek = new Array(7); //{2}var daysOfWeek = new Array(&apos;Sunday&apos;, &apos;Monday&apos;, &apos;Tuesday&apos;, &apos;Wednesday&apos;,&apos;Thursday&apos;, &apos;Friday&apos;, &apos;Saturday&apos;); //{3}使用new关键字，就能简单地声明并初始化一个数组（行{1}）。用这种方式，还可以创建一个指定长度的数组（行{2}）。另外，也可以直接将数组元素作为参数传递给它的构造器（行{3}）。//使用[]创建数组var daysOfWeek = [];也可使用一些元素初始化数组，如下：var daysOfWeek = [&apos;Sunday&apos;, &apos;Monday&apos;, &apos;Tuesday&apos;, &apos;Wednesday&apos;,&apos;Thursday&apos;, &apos;Friday&apos;, &apos;Saturday&apos;]; 使用数组的length属性获取数组的长度console.log(daysOfWeek.length); //7</code></pre><h4 id="1-2-访问元素和迭代数组"><a href="#1-2-访问元素和迭代数组" class="headerlink" title="1.2 访问元素和迭代数组"></a>1.2 访问元素和迭代数组</h4><p>要访问数组里特定位置的元素，可以用中括号传递数值位置，得到想知道的值或者赋新的值。如下：</p><pre><code>for (var i=0; i&lt;daysOfWeek.length; i++){    console.log(daysOfWeek[i]);} </code></pre><p>我们来看另一个例子：求斐波那契数列的前20个数字。已知斐波那契数列中第一个数字是1，<br>第二个是2，从第三项开始，每一项都等于前两项之和：</p><pre><code>var fibonacci = []; //{1}fibonacci[1] = 1; //{2}fibonacci[2] = 2; //{3}for(var i = 3; i &lt; 20; i++){    fibonacci[i] = fibonacci[i-1] + fibonacci[i-2]; ////{4}}for(var i = 1; i&lt;fibonacci.length; i++){ //{5}    console.log(fibonacci[i]); //{6}} 在行{1}处，我们声明并创建了一个数组。在行{2}和行{3}，把斐波那契数列中的前两个数字分别赋给了数组的第二和第三位（在JavaScript中，数组的第一位是0，这里我们略过，从第二位开始分别保存斐波那契数列中对应位置的元素）。然后，我们需要做的就是想办法得到斐波那契数列的第三到第二十位的数字（前两个值我们已经初始化过了）。我们可以用循环来处理，把数组中前两位上的元素相加，结果赋给当前位置上的元素（行{4}——从数组中的索引3到索引19）。最后，看看输出（行{6}），我们只需要循环遍历数组的各个元素（行{5}）。</code></pre><h4 id="1-3-添加元素"><a href="#1-3-添加元素" class="headerlink" title="1.3 添加元素"></a>1.3 添加元素</h4><h5 id="1-3-1-使用数组索引直接添加"><a href="#1-3-1-使用数组索引直接添加" class="headerlink" title="1.3.1 使用数组索引直接添加"></a>1.3.1 使用数组索引直接添加</h5><pre><code>var numbers = [0,1,2,3,4,5,6,7,8,9];如果想要给数组添加一个元素（比如10），只要把值赋给数组中最后一个空位上的元素即可。numbers[numbers.length] = 10; </code></pre><h5 id="1-3-2-使用push方法"><a href="#1-3-2-使用push方法" class="headerlink" title="1.3.2 使用push方法"></a>1.3.2 使用push方法</h5><p>push方法，能把元素添加到数组的末尾</p><pre><code>numbers.push(11);numbers.push(12, 13); </code></pre><h5 id="1-3-3-插入元素到数组首位"><a href="#1-3-3-插入元素到数组首位" class="headerlink" title="1.3.3 插入元素到数组首位"></a>1.3.3 插入元素到数组首位</h5><p>现在，我们希望在数组中插入一个值，不像之前那样插入到最后，而是放到数组的首位。为了实现这个需求，首先我们要腾出数组里第一个元素的位置，把所有的元素向右移动一位。我们可以循环数组中的元素，从最后一位+1（长度）开始，将其对应的前一个元素的值赋给它，依次处理，最后把我们想要的值赋给第一个位置（-1）上。</p><pre><code>for (var i=numbers.length; i&gt;=0; i--){    numbers[i] = numbers[i-1];}numbers[0] = -1; </code></pre><p>下面这张图描述了我们刚才的操作过程：</p><p><img src="/2019/02/14/cjsog2uq8000zxsvb4x86m52t/shift.png" alt="插入元素到数组首位">;</p><pre><code>也可以使用unshift方法numbers.unshift(-2);numbers.unshift(-4, -3);</code></pre><h4 id="1-4-删除元素"><a href="#1-4-删除元素" class="headerlink" title="1.4 删除元素"></a>1.4 删除元素</h4><h5 id="1-4-1-删除数组里最靠后的元素"><a href="#1-4-1-删除数组里最靠后的元素" class="headerlink" title="1.4.1 删除数组里最靠后的元素"></a>1.4.1 删除数组里最靠后的元素</h5><pre><code>删除数组里最靠后的元素使用pop方法：numbers.pop();</code></pre><h5 id="1-4-2-从数组首位删除元素"><a href="#1-4-2-从数组首位删除元素" class="headerlink" title="1.4.2 从数组首位删除元素"></a>1.4.2 从数组首位删除元素</h5><p>如果要移除数组里的第一个元素，可以用下面的代码：</p><pre><code>for (var i = 0; i &lt; numbers.length; i++){    numbers[i] = numbers[i+1];} </code></pre><p>下面这张图呈现了这段代码的执行过程：</p><p><img src="/2019/02/14/cjsog2uq8000zxsvb4x86m52t/shift.png" alt="从数组首位删除元素"></p><pre><code>我们把数组里所有的元素都左移了一位。但数组的长度依然是17，这意味着数组中有额外的一个元素（值是undefined）。在最后一次循环里，i + 1引用了一个数组里还未初始化的位置。在Java、C/C+或C#等一些语言里，这样写可能就会抛出异常了，因此不得不在 numbers.length- 1处停止循环。可以看到，我们只是把数组第一位的值用第二位覆盖了，并没有删除元素（因为数组的长度和之前还是一样的，并且了多一个未定义元素）。</code></pre><p>使用unshift()方法</p><pre><code>numbers.shift(); //通过shift和unshift方法，就能用数组模拟基本的队列数据结构，</code></pre><h5 id="1-4-3-在任意位置添加或删除元素"><a href="#1-4-3-在任意位置添加或删除元素" class="headerlink" title="1.4.3 在任意位置添加或删除元素"></a>1.4.3 在任意位置添加或删除元素</h5><p>使用splice方法，简单地通过指定位置/索引，就可以删除相应位置和数量的元素： //如下</p><pre><code>numbers.splice(5,3); //这行代码删除了从数组索引5开始的3个元素。这就意味着numbers[5]、numbers[6]和numbers[7]从数组中删除了。</code></pre><p>splice方法接收的第一个参数，表示想要删除或插入的元素的索引值。第二个参数是删除元素的个数（这个例子里，我们的目的不是删除元素，所以传入0）。第三个参数往后，就是要添加到数组里的值（元素2、3、4）。输出会发现值又变成了从3到12。</p><pre><code>numbers.splice(5,3,2,3,4);//我们从索引5开始删除了3个元素，但也从索引5开始添加了元素2、3、4</code></pre><p>对于JavaScript数组和对象，我们还可以用delete操作符删除数组中的元素，例如delete numbers[0]。然而，数组位置0的值会变成undefined，也就是说，以上操作等同于numbers[0] = undefined。因此，我们应该始终使用splice、pop或shift（马上就会学到）方法来删除数组元素。</p><h3 id="二、-二维和多维数组"><a href="#二、-二维和多维数组" class="headerlink" title="二、 二维和多维数组"></a>二、 二维和多维数组</h3><p>JavaScript只支持一维数组，并不支持矩阵(二维数组)。但是，我们可以用数组套数组，实现矩阵或任一多维数组。代码也可以写成这样：</p><pre><code>var averageTemp = [];averageTemp[0] = [];averageTemp[0][0] = 72;averageTemp[0][1] = 75;averageTemp[0][2] = 79;averageTemp[0][3] = 79;averageTemp[0][4] = 81;averageTemp[0][5] = 81;//day 2averageTemp[1] = [];averageTemp[1][0] = 81;averageTemp[1][1] = 79;averageTemp[1][2] = 75;averageTemp[1][3] = 75;averageTemp[1][4] = 73;averageTemp[1][5] = 72; </code></pre><p>上面的代码里，我们分别指定了每天和每小时的数据。数组中的内容如下图所示：</p><p><img src="/2019/02/14/cjsog2uq8000zxsvb4x86m52t/images-01.png" alt="每天和每小时的数据"></p><p>每行就是每天的数据，每列是当天不同时段的气温</p><h4 id="2-1-迭代二维数组的元素"><a href="#2-1-迭代二维数组的元素" class="headerlink" title="2.1 迭代二维数组的元素"></a>2.1 迭代二维数组的元素</h4><p>如果想看矩阵的输出，我们可以创建一个通用函数，专门输出其中的值：</p><pre><code>function printMatrix(myMatrix) {    for (var i=0; i&lt;myMatrix.length; i++){         for (var j=0; j&lt;myMatrix[i].length; j++){            console.log(myMatrix[i][j]);        }    }} 需要遍历所有的行和列。因此，我们需要使用一个嵌套的for循环来处理，其中变量i为行，变量j为列。使用以下代码查看矩阵averageTemp的输出：printMatrix(averageTemp); </code></pre><h4 id="2-2-多维数组"><a href="#2-2-多维数组" class="headerlink" title="2.2 多维数组"></a>2.2 多维数组</h4><p>我们也可以用这种方式来处理多维数组。假如我们要创建一个3×3×3的矩阵，每一格里包含矩阵的i（行）、j（列）及z（深度）之和：</p><pre><code>var matrix3x3x3 = [];for (var i=0; i&lt;3; i++){    matrix3x3x3[i] = [];    for (var j=0; j&lt;3; j++){        matrix3x3x3[i][j] = [];        for (var z=0; z&lt;3; z++){            matrix3x3x3[i][j][z] = i+j+z;        }    }}</code></pre><p>数据结构中有几个维度都没关系，我们都可以用循环遍历每个维度来访问所有格子。3×3×3的矩阵也可用立体图表示如下：</p><p><img src="/2019/02/14/cjsog2uq8000zxsvb4x86m52t/images-02.png" alt="3×3×3的矩阵"></p><p>可以用以下代码输出这个矩阵的内容：</p><pre><code>for (var i=0; i&lt;matrix3x3x3.length; i++){    for (var j=0; j&lt;matrix3x3x3[i].length; j++){        for (var z=0; z&lt;matrix3x3x3[i][j].length; z++){            console.log(matrix3x3x3[i][j][z]);        }    }} </code></pre><p>如果是一个3×3×3×3的矩阵，代码中就会用四层嵌套的for语句，以此类推。</p><h4 id="2-3-JavaScript-的数组方法参考"><a href="#2-3-JavaScript-的数组方法参考" class="headerlink" title="2.3 JavaScript 的数组方法参考"></a>2.3 JavaScript 的数组方法参考</h4><table><thead><tr><th>方法名</th><th style="text-align:center">语法</th></tr></thead><tbody><tr><td>concat</td><td style="text-align:center">连接数组（一个或多个），返回连接后的结果</td></tr><tr><td>every</td><td style="text-align:center">对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true</td></tr><tr><td>filter</td><td style="text-align:center">对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组</td></tr><tr><td>forEach</td><td style="text-align:center">遍历数组</td></tr><tr><td>join</td><td style="text-align:center">将所有的数组元素连接成一个字符串</td></tr><tr><td>indexOf</td><td style="text-align:center">从数组开始查找数组元素在数组中的的位置，并返回，没有找到则返回-1 </td></tr><tr><td>lastIndexOf</td><td style="text-align:center">从数组结尾查找数组元素在数组中的的位置，并返回，没有找到则返回-1</td></tr><tr><td>map</td><td style="text-align:center">遍历数组元素，并返回</td></tr><tr><td>reverse</td><td style="text-align:center">颠倒数组中元素的顺序</td></tr><tr><td>slice</td><td style="text-align:center">截取数组中的元素</td></tr><tr><td>some</td><td style="text-align:center">对数组中的每一项运行给定函数，如果任一项返回true，则返回true</td></tr><tr><td>sort</td><td style="text-align:center">按照字母顺序对数组排序，支持传入指定排序方法的函数作为参数</td></tr><tr><td>toString</td><td style="text-align:center">将数组作为字符串返回</td></tr><tr><td>valueOf</td><td style="text-align:center">和toString类似，将数组作为字符串返回</td></tr></tbody></table><h5 id="2-3-1-数组合并"><a href="#2-3-1-数组合并" class="headerlink" title="2.3.1 数组合并"></a>2.3.1 数组合并</h5><p>concat方法可以向一个数组传递数组、对象或是元素。数组会按照该方法传入的参数顺序连接指定数组。如下：</p><pre><code>var zero = 0;var positiveNumbers = [1,2,3];var negativeNumbers = [-3,-2,-1];var numbers = negativeNumbers.concat(zero, positiveNumbers);  //[3,2,1,0,1,2,3]</code></pre><h5 id="2-3-1-迭代器函数"><a href="#2-3-1-迭代器函数" class="headerlink" title="2.3.1 迭代器函数"></a>2.3.1 迭代器函数</h5><p>迭代数组中的元素可以使用for循环，同样JavaScript内置了许多数组可用的迭代方法</p><p>解决如下案例：</p><p>假如有一个数组，它值是从1到15，如果数组里的元素可以被2整除（偶数），函数就返回true，否则返回false：</p><pre><code>var isEven = function (x) {    // 如果x是2的倍数，就返回true    console.log(x);    return (x % 2 == 0) ? true : false;};var numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]; </code></pre><ul><li><p>用every方法迭代</p><p>  numbers.every(isEven);  //false</p><p>  //数组numbers的第一个元素是1，它不是2的倍数（1是奇数），因此isEven 函数返回false，然后every执行结束。</p></li><li><p>用some方法迭代</p></li></ul><p>some方法会迭代数组的每个元素，直到函数返回true：</p><pre><code>numbers.some(isEven); //numbers数组中第一个偶数是2（第二个元素）。第一个被迭代的元素是1，isEven会返回false。第二个被迭代的元素是2，isEven返回true——迭代结束。</code></pre><ul><li><p>用forEach方法迭代</p><p> numbers.forEach(function(x){</p><pre><code>console.log((x % 2 == 0));</code></pre><p> }); </p></li><li><p>使用map和filter方法</p><p>  var myMap = numbers.map(isEven); </p><p>  //[false, true, false, true, false, true, false, true,false, true, false, true, false, true, false]。</p><p>  filter方法返回新数组由使函数返回true的元素组成：</p><p>  var evenNumbers = numbers.filter(isEven); </p><p>  //[2, 4, 6, 8, 10, 12, 14]</p></li><li><p>使用reduce方法</p></li></ul><p>reduce方法接收一个函数作为参数，这个函数有四个参数：previousValue、currentValue、index和array。这个函数会返回一个将被叠加到累加器的值，reduce方法停止执行后会返回这个累加器</p><pre><code>numbers.reduce(function(previous, current, index){    return previous + current; //120}); </code></pre><h4 id="2-4-ECMAScript-6-和数组的新功能"><a href="#2-4-ECMAScript-6-和数组的新功能" class="headerlink" title="2.4 ECMAScript 6 和数组的新功能"></a>2.4 ECMAScript 6 和数组的新功能</h4><p>下标展示了一些ES6和ES7新增的数组方法</p><table><thead><tr><th>方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>@@iterator</td><td style="text-align:center">返回一个包含数组键值对的迭代器对象，可以通过同步调用得到数组元素的键值对</td></tr><tr><td>copyWithin</td><td style="text-align:center">复制数组中一系列元素到同一数组指定的起始位置</td></tr><tr><td>entries</td><td style="text-align:center">返回包含数组所有键值对的@@iterator</td></tr><tr><td>includes</td><td style="text-align:center">如果数组中存在某个元素则返回true，否则返回false。ES7新增</td></tr><tr><td>find</td><td style="text-align:center">根据回调函数给定的条件从数组中查找元素，如果找到则返回该元素</td></tr><tr><td>findIndex</td><td style="text-align:center">根据回调函数给定的条件从数组中查找元素，如果找到则返回该元素在数组中的索引-1 </td></tr><tr><td>fill</td><td style="text-align:center">用静态值填充数组-1</td></tr><tr><td>from</td><td style="text-align:center">根据已有数组创建一个新数组</td></tr><tr><td>keys</td><td style="text-align:center">返回包含数组所有索引的@@iterator</td></tr><tr><td>of</td><td style="text-align:center">根据传入的参数创建一个新数组</td></tr><tr><td>values</td><td style="text-align:center">返回包含数组中所有值的@@iterator</td></tr><tr><td>sort</td><td style="text-align:center">按照字母顺序对数组排序，支持传入指定排序方法的函数作为参数</td></tr></tbody></table><p>除了这些新的方法，还有一种用for…of循环来迭代数组的新做法，以及可以从数组实例得到的迭代器对象</p><h5 id="2-4-1-使用forEach和箭头函数迭代"><a href="#2-4-1-使用forEach和箭头函数迭代" class="headerlink" title="2.4.1 使用forEach和箭头函数迭代"></a>2.4.1 使用forEach和箭头函数迭代</h5><p>箭头函数可以简化使用forEach迭代数组元素的做法，如下</p><pre><code>numbers.forEach(function (x) {    console.log(x % 2 == 0);});//这段代码可以简化如下：numbers.forEach(x =&gt; {    console.log((x % 2 == 0));}); </code></pre><h5 id="2-4-2-使用for…of循环迭代"><a href="#2-4-2-使用for…of循环迭代" class="headerlink" title="2.4.2 使用for…of循环迭代"></a>2.4.2 使用for…of循环迭代</h5><pre><code>for (let n of numbers) {    console.log((n % 2 == 0) ? &apos;even&apos; : &apos;odd&apos;);} </code></pre><h5 id="2-4-3-ES6新的迭代器（-iterator）"><a href="#2-4-3-ES6新的迭代器（-iterator）" class="headerlink" title="2.4.3 ES6新的迭代器（@@iterator）"></a>2.4.3 ES6新的迭代器（@@iterator）</h5><p>ES6还为Array类增加了一个@@iterator属性，需要通过Symbol.iterator来访问。代码如下:</p><pre><code>let iterator = numbers[Symbol.iterator]();console.log(iterator.next().value); // 1console.log(iterator.next().value); // 2console.log(iterator.next().value); // 3console.log(iterator.next().value); // 4console.log(iterator.next().value); // 5 </code></pre><p>然后，不断调用迭代器的next方法，就能依次得到数组中的值,数组中所有值都迭代完之后，iterator.next().value会返回undefined。 </p><h5 id="2-4-4-数组的entries、keys和values方法"><a href="#2-4-4-数组的entries、keys和values方法" class="headerlink" title="2.4.4 数组的entries、keys和values方法"></a>2.4.4 数组的entries、keys和values方法</h5><ol><li>entries: 返回包含键值对的@@iterator，如下案例：</li></ol><pre><code>let numbers = [1,2,3]let aEntries = numbers.entries(); // 得到键值对的迭代器,key是数组中的位置，value是保存在数组索引的值。console.log(aEntries.next().value); // [0, 1] - 位置0的值为1console.log(aEntries.next().value); // [1, 2] - 位置1的值为2console.log(aEntries.next().value); // [2, 3] - 位置2的值为3 </code></pre><p>entries方法会返回numbers数组位置以及对应的值，如果没有可迭代的值则返回undefined。</p><ol start="2"><li>entries：方法返回包含数组索引的@@iterator，如下案例：</li></ol><pre><code>let numbers = [1,2,3]let aKeys = numbers.keys(); // 得到数组索引的迭代器console.log(aKeys.next()); // {value: 0, done: false }console.log(aKeys.next()); // {value: 1, done: false }console.log(aKeys.next()); // {value: 2, done: false } console.log(aKeys.next()); // {value: undefined, done: true } </code></pre><p>keys方法会返回numbers数组的索引。一旦没有可迭代的值，aKeys.next()就会返回一个value属性为undefined，done属性为true的对象。如果done属性的值为false，就意味着还有可迭代的值。</p><ol start="3"><li>values：方法返回的@@iterator则包含数组的值</li></ol><pre><code>let numbers = [1,2,3]let aValues = numbers.values();console.log(aValues.next()); // {value: 1, done: false }console.log(aValues.next()); // {value: 2, done: false }console.log(aValues.next()); // {value: 3, done: false } console.log(aValues.next()); // {value: undefined, done: true } </code></pre><h5 id="2-4-5-from方法"><a href="#2-4-5-from方法" class="headerlink" title="2.4.5 from方法"></a>2.4.5 from方法</h5><p>Array.from方法根据已有的数组创建一个新数组，参数为过滤Array中元素的函数</p><pre><code>let evens = Array.from(numbers, x =&gt; (x % 2 == 0)); </code></pre><h5 id="2-4-6-用Array-of方法"><a href="#2-4-6-用Array-of方法" class="headerlink" title="2.4.6 用Array.of方法"></a>2.4.6 用Array.of方法</h5><p>Array.of方法根据传入的参数创建一个新数组</p><pre><code>let numbers4 = Array.of(1, 2, 3, 4, 5, 6); //[1,2,3,4,5,6]</code></pre><p>也可以用这个方法复制已有的数组</p><pre><code>let numbersCopy = Array.of(...numbers4);  //[1,2,3,4,5,6]</code></pre><h5 id="2-4-7-使用fill方法"><a href="#2-4-7-使用fill方法" class="headerlink" title="2.4.7 使用fill方法"></a>2.4.7 使用fill方法</h5><p>fill方法用静态值填充数组,参数为要添加的位置范围</p><pre><code>let numbersCopy = Array.of(1, 2, 3, 4, 5, 6); numbersCopy.fill(0); //（[0, 0, 0, 0, 0, 0]numbersCopy.fill(1, 3, 5); //[0, 0, 0, 1, 1, 0]</code></pre><p>创建数组并初始化值的时候，fill方法非常方便，如下：</p><pre><code>let ones = Array(6).fill(1); //[1, 1, 1, 1, 1, 1]</code></pre><h5 id="2-4-8-copyWithin方法"><a href="#2-4-8-copyWithin方法" class="headerlink" title="2.4.8 copyWithin方法"></a>2.4.8 copyWithin方法</h5><p>copyWithin方法复制数组中的一系列元素到同一数组指定的起始位置</p><pre><code>let copyArray = [1, 2, 3, 4, 5, 6]; copyArray.copyWithin(0, 3); // [4, 5, 6, 4, 5, 6]   copyArray.copyWithin(1, 3, 5); //[4,4,5,4,5,6]</code></pre><h5 id="2-4-9-排序元素"><a href="#2-4-9-排序元素" class="headerlink" title="2.4.9 排序元素"></a>2.4.9 排序元素</h5><ul><li>反转数组reverse：</li></ul><pre><code>let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14. 15];numbers.reverse(); //[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];</code></pre><ul><li>对数组进行排序sort：</li></ul><pre><code>numbers.sort(); //[1, 10, 11, 12, 13, 14, 15, 2, 3, 4, 5, 6, 7, 8, 9]//sort方法在对数组做排序时，把元素默认成字符串进行相互比较。//所以在使用的时候传入自己写的比较函数numbers.sort(function(a, b){    return a-b;}); //[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]</code></pre><ul><li>自定义排序</li></ul><p>我们可以对任何对象类型的数组排序，也可以创建compareFunction来比较元素。例如，对象Person有名字和年龄属性，我们希望根据年龄排序，就可以这么写：</p><pre><code>var friends = [    {name: &apos;John&apos;, age: 30},    {name: &apos;Ana&apos;, age: 20},    {name: &apos;Chris&apos;, age: 25}];function comparePerson(a, b){    if (a.age &lt; b.age){        return -1    }    if (a.age &gt; b.age){        return 1    }    return 0;}console.log(friends.sort(comparePerson)); //在这个例子里，最后会输出Ana(20), Chris(25), John(30)。</code></pre><ul><li>字符串排序</li></ul><p>JavaScript在做字符比较的时候，是根据字符对应的ASCII值来比较的。 如下案例：</p><pre><code>var names =[&apos;Ana&apos;, &apos;ana&apos;, &apos;john&apos;, &apos;John&apos;];console.log(names.sort());  //[&quot;Ana&quot;, &quot;John&quot;, &quot;ana&quot;, &quot;john&quot;] //因为A、J、a、j对应的ASCII值分别是65、75、97、106。</code></pre><p>现在，如果给sort传入一个忽略大小写的比较函数，将会输出[“Ana”, “ana”, “John”,”john”]：</p><pre><code>names.sort(function(a, b){    if (a.toLowerCase() &lt; b.toLowerCase()){        return -1    }    if (a.toLowerCase() &gt; b.toLowerCase()){        return 1    }    return 0;}); </code></pre><p>假如对带有重音符号的字符做排序的话，我们可以用localeCompare来实现：</p><pre><code>var names2 = [&apos;Maève&apos;, &apos;Maeve&apos;];console.log(names2.sort(function(a, b){    return a.localeCompare(b);})); //[&quot;Maeve&quot;, &quot;Maève&quot;]</code></pre><ul><li>搜索（indexOf/lastIndexOf）</li></ul><p>搜索有两个方法：indexOf方法返回与参数匹配的第一个元素的索引，lastIndexOf返回与参数匹配的最后一个元素的索引,如果没有匹配的元素则返回-1。</p><pre><code>console.log(numbers.indexOf(10)); //9console.log(numbers.indexOf(100)); //-1</code></pre><ul><li>搜索（ECMAScript 6——find和findIndex方法）</li></ul><p>find和findIndex方法接收一个回调函数，搜索一个满足回调函数条件的值。</p><pre><code>let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];function multipleOf13(element, index, array) {    return (element % 13 == 0) ? true : false;}console.log(numbers.find(multipleOf13)); //13console.log(numbers.findIndex(multipleOf13)); //12//find和findIndex的不同之处在于，find方法返回第一个满足条件的值。//findIndex方法则返回这个值在数组里的索引。//如果没有满足条件的值，find会返回undefined，而findIndex返回-1。</code></pre><ul><li>搜索（ECMAScript 7——使用includes方法） </li></ul><p>如果数组里存在某个元素，includes方法会返回true，否则返回false。</p><pre><code>console.log(numbers.includes(15)); //trueconsole.log(numbers.includes(20));  //false</code></pre><p>如果给includes方法传入一个起始索引，搜索会从索引指定的位置开始：</p><pre><code>let numbers2 = [7, 6, 5, 4, 3, 2, 1];console.log(numbers2.includes(4, 5)); //false</code></pre><h5 id="2-4-10-输出数组为字符串"><a href="#2-4-10-输出数组为字符串" class="headerlink" title="2.4.10 输出数组为字符串"></a>2.4.10 输出数组为字符串</h5><ul><li>toString</li></ul><p>把数组里所有元素输出为一个字符串</p><pre><code>let numbers = [1, 2, 3, 4]console.log(numbers.toString()); //1,2,3,4</code></pre><p>如果想用一个不同的分隔符（比如-）把元素隔开，可以用join方法：</p><pre><code>var numbersString = numbers.join(&apos;-&apos;);console.log(numbersString); //1-2-3-4</code></pre><h4 id="三、-类型数组"><a href="#三、-类型数组" class="headerlink" title="三、 类型数组"></a>三、 类型数组</h4><p>JavaScript数组不是强类型的，因此它可以存储任意类型的数据。而类型数组则用于存储单一类型的数据。它的语法是let myArray = new TypedArray<br>(length)，其中TypedArray需替换为下表所列之一。</p><table><thead><tr><th>类型数组</th><th style="text-align:center">数据类型</th></tr></thead><tbody><tr><td>Int8Array</td><td style="text-align:center">8位二进制补码整数</td></tr><tr><td>Uint8Array</td><td style="text-align:center">8位无符号整数</td></tr><tr><td>Uint8ClampedArray</td><td style="text-align:center">8位无符号整数</td></tr><tr><td>Int16Array</td><td style="text-align:center">16位二进制补码整数</td></tr><tr><td>Uint16Array</td><td style="text-align:center">16位无符号整数</td></tr><tr><td>Int32Array</td><td style="text-align:center">32位二进制补码整数</td></tr><tr><td>Uint32Array</td><td style="text-align:center">32位无符号整数</td></tr><tr><td>Float32Array</td><td style="text-align:center">32位IEEE浮点数</td></tr><tr><td>Float64Array</td><td style="text-align:center">64位IEEE浮点数</td></tr></tbody></table><p>代码示例如下：</p><pre><code>let length = 5;let int16 = new Int16Array(length);for (let i=0; i&lt;length; i++){    int16[i] = i+1;}console.log(int16); //[1, 2, 3, 4, 5]</code></pre><p>使用WebGL API、进行位操作、处理文件和图像时，类型数组都可以大展拳脚。它用起来和普通数组也毫无二致，本章所学的数组方法和功能都可以用于类型数组。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、创建和初始化数组&quot;&gt;&lt;a href=&quot;#一、创建和初始化数组&quot; class=&quot;headerlink&quot; title=&quot;一、创建和初始化数组&quot;&gt;&lt;/a&gt;一、创建和初始化数组&lt;/h3&gt;&lt;h4 id=&quot;1-1-创建数组&quot;&gt;&lt;a href=&quot;#1-1-创建数组&quot; cla
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://www.23ybob.club/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript数据结构与算法一（javascript基础）</title>
    <link href="https://www.23ybob.club/2019/02/13/cjsog2u5i0004xsvbutr33dmk/"/>
    <id>https://www.23ybob.club/2019/02/13/cjsog2u5i0004xsvbutr33dmk/</id>
    <published>2019-02-13T06:24:30.000Z</published>
    <updated>2019-02-15T02:34:03.708Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、相等操作符（-和-）"><a href="#一、相等操作符（-和-）" class="headerlink" title="一、相等操作符（==和===）"></a>一、相等操作符（==和===）</h4><h5 id="1-相等操作符（-）"><a href="#1-相等操作符（-）" class="headerlink" title="1.相等操作符（==）"></a>1.相等操作符（==）</h5><p>在使用==时，不同类型的值也可以被看作相等<br>下面表格展示了不同类型的值用相等操作符比较后的结果。</p><table><thead><tr><th>类型（x）</th><th style="text-align:center">类型（y）</th><th style="text-align:right">结 果</th></tr></thead><tbody><tr><td>null</td><td style="text-align:center">undefined</td><td style="text-align:right">true</td></tr><tr><td>undefined</td><td style="text-align:center">null</td><td style="text-align:right">true</td></tr><tr><td>数字</td><td style="text-align:center">字符串</td><td style="text-align:right">x == toNumber(y) </td></tr><tr><td>字符串</td><td style="text-align:center">数字</td><td style="text-align:right">toNumber(x) == y </td></tr><tr><td>布尔值</td><td style="text-align:center">任意类型</td><td style="text-align:right">toNumber(x) == y </td></tr><tr><td>任意类型</td><td style="text-align:center">布尔值</td><td style="text-align:right">x == toNumber(y) </td></tr><tr><td>字符串或数字</td><td style="text-align:center">对象</td><td style="text-align:right">x == toPrimitive(y) </td></tr><tr><td>对象</td><td style="text-align:center">字符串或数字</td><td style="text-align:right">toPrimitive(x) == y </td></tr></tbody></table><p>如果x和y是相同类型，JavaScript会比较它们的值或对象值。其他没有列在这个表格中的情况<br>都会返回false。<br>toNumber和toPrimitive方法是内部的，并根据以下表格对其进行估值。<br>toNumber方法对不同类型返回的结果如下：</p><table><thead><tr><th>值类型</th><th style="text-align:center">结 果</th></tr></thead><tbody><tr><td>undefined</td><td style="text-align:center">NAN</td></tr><tr><td>null</td><td style="text-align:center">+0</td></tr><tr><td>布尔值</td><td style="text-align:center">如果是true，返回1；如果是false，返回+0</td></tr><tr><td>数字</td><td style="text-align:center">数字对应的值</td></tr><tr><td>字符串</td><td style="text-align:center">将字符串解析成数字。如果字符串中包含字母，返回NaN；如果是由数字字符组成的，转换成数字</td></tr><tr><td>对象</td><td style="text-align:center">Number(toPrimitive(vale)) </td></tr></tbody></table><p>toPrimitive方法对不同类型返回的结果如下：</p><table><thead><tr><th>值类型</th><th style="text-align:center">结 果</th></tr></thead><tbody><tr><td>对象</td><td style="text-align:center">如果对象的valueOf方法的结果是原始值，返回原始值。如果对象的toString方法返回原始值，就返回这个值；其他情况都返回一个错误</td></tr></tbody></table><pre><code>例：console.log(&apos;packt&apos; == true); //输出false首先，布尔值会被toNumber方法转成数字，因此得到packt == 1。其次，用toNumber转换字符串值。因为字符串包含有字母，所以会被转成NaN，表达式就变成了NaN == 1，结果就是false。</code></pre><h5 id="1-相等操作符（-）-1"><a href="#1-相等操作符（-）-1" class="headerlink" title="1.相等操作符（===）"></a>1.相等操作符（===）</h5><p>如果比较的两个值或者类型不同则返回false，如果比较的两个值类型相同，结果会根据下表判断。</p><table><thead><tr><th>类型（x）</th><th style="text-align:center">类型（y）</th><th style="text-align:right">结 果</th></tr></thead><tbody><tr><td>数字</td><td style="text-align:center">x和y数值相同（但不是NaN）</td><td style="text-align:right">true</td></tr><tr><td>字符串</td><td style="text-align:center">x和y是相同的字符</td><td style="text-align:right">true</td></tr><tr><td>布尔值</td><td style="text-align:center">x和y都是true或false</td><td style="text-align:right">true</td></tr><tr><td>对象</td><td style="text-align:center">x和y引用同一个对象</td><td style="text-align:right">true</td></tr></tbody></table><pre><code>例：console.log(&apos;packt&apos; === true); //false     console.log(&apos;packt&apos; === &apos;packt&apos;); //true </code></pre><h4 id="二、声明展开和剩余参数"><a href="#二、声明展开和剩余参数" class="headerlink" title="二、声明展开和剩余参数"></a>二、声明展开和剩余参数</h4><h5 id="2-1展开操作符"><a href="#2-1展开操作符" class="headerlink" title="2.1展开操作符"></a>2.1展开操作符</h5><p>在es5中使用apply()函数将数组转化为参数，在es6中使用展开操作符(…);</p><pre><code>例：var params = [1, 3, 5]function sum(a=1, b=3, c=4) {    return a+b+c}console.log(sum(...params));  //es6使用扩展符传入数组console.log(sum.apply(null, params)); //es5使用apply传入数组</code></pre><p>在函数中也可以使用展开操作符(…)代替arguments，当做剩余参数使用，如下案例：</p><pre><code>function restParamaterFunction (x, y, ...a) {    return (x + y) * a.length;}console.log(restParamaterFunction(1, 2, &quot;hello&quot;, true, 7)); //输出9; es5中实现function restParamaterFunction(x, y) {    var a = Array.prototype.slice.call(arguments, 2);    console.log(a)    return (x + y) * a.length;}; </code></pre><h5 id="2-2数组解构"><a href="#2-2数组解构" class="headerlink" title="2.2数组解构"></a>2.2数组解构</h5><p>es6引入数组解构的概念，可以一次初始化多个变量，如下：</p><pre><code>var [x, y] = [&apos;a&apos;, &apos;b&apos;]; 等同于var x = &apos;a&apos;; var y = &apos;b&apos;;</code></pre><p>数组解构也可以用来进行值的互换，而不需要创建临时变量，如下：</p><pre><code>[x, y] = [y, x]; //等同于var temp = x,x = y,y = temp; </code></pre><p>对象也可以解构，如下：</p><pre><code>//属性简写的功能，var [x, y] = [&apos;a&apos;, &apos;b&apos;];var obj = { x, y };console.log(obj); // { x: &quot;a&quot;, y: &quot;b&quot; } //等同于var x = &apos;a&apos;;var y = &apos;b&apos;;var obj2 = { x: x, y: y };console.log(obj2); // { x: &quot;a&quot;, y: &quot;b&quot; } //方法属性var hello = {    name : &apos;abcdef&apos;,    printHello() {        console.log(&apos;Hello&apos;);    }}console.log(hello.printHello()); //等同于var hello = {    name: &apos;abcdef&apos;,    printHello: function printHello() {        console.log(&apos;Hello&apos;);    }}; </code></pre><h4 id="三、使用类进行面向对象编程"><a href="#三、使用类进行面向对象编程" class="headerlink" title="三、使用类进行面向对象编程"></a>三、使用类进行面向对象编程</h4><pre><code>声明一个book类的方式function Book(title, pages, isbn){ //{1}    this.title = title;    this.pages = pages;    this.isbn = isbn;}Book.prototype.printTitle = function(){    console.log(this.title);}; 使用es6可以简化为一下语法只需要使用class关键字声明一个constructor函数和其他函数class Book { //{2}    constructor (title, pages, isbn) {        this.title = title;        this.pages = pages;        this.isbn = isbn;    }    printIsbn(){        console.log(this.isbn);    }} //以上两种声明据用相同的效果和输出let book = new Book(&apos;title&apos;, &apos;pag&apos;, &apos;isbn&apos;);console.log(book.title); //输出图书标题book.title = &apos;new title&apos;; //更新图书标题console.log(book.title); //输出图书标题</code></pre><h5 id="3-1继承"><a href="#3-1继承" class="headerlink" title="3.1继承"></a>3.1继承</h5><p>es6简化声明类的方式 如下：</p><pre><code>class Book { //{2}    constructor (title, pages, isbn) {        this.title = title;        this.pages = pages;        this.isbn = isbn;    }    printIsbn(){        console.log(this.isbn);    }} class ITBook extends Book { //{扩展book并继承其行为    constructor (title, pages, isbn, technology) {    super(title, pages, isbn); //引用父类的构造函数        this.technology = technology;    }    printTechnology(){        console.log(this.technology);    }}let jsBook = new ITBook(&apos;学习JS算法&apos;, &apos;200&apos;, &apos;1234567890&apos;, &apos;JavaScript&apos;);console.log(jsBook.title);console.log(jsBook.printTechnology()); //我们可以使用extends关键字扩展一个类并继承它的行为。在构造函数中，也可以通过super关键字引用父类的构造函数。</code></pre><h5 id="3-2使用属性存取器"><a href="#3-2使用属性存取器" class="headerlink" title="3.2使用属性存取器"></a>3.2使用属性存取器</h5><p>使用新的类语法也可以为属性创建存取器函数。如下：</p><pre><code>class Person {    constructor(name) {        this._name = name; //{1}    }    get name() { //{2}        return this._name;    }    set name(value) { //{3}        this._name = value;    }}let lotrChar = new Person(&apos;Frodo&apos;);console.log(lotrChar.name); //FrodolotrChar.name = &apos;Gandalf&apos;; console.log(lotrChar.name); //GandalflotrChar._name = &apos;Sam&apos;; console.log(lotrChar.name); //Sam//要声明get和set函数，只需要在我们要暴露和使用的函数名前面加上get或set关键字。可以用相同的名字声明类属性，或者在属性名前面加下划线，让这个属性看起来像是私有的。然后，只要像普通的属性一样，引用它们的名字，就可以执行get和set函数。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、相等操作符（-和-）&quot;&gt;&lt;a href=&quot;#一、相等操作符（-和-）&quot; class=&quot;headerlink&quot; title=&quot;一、相等操作符（==和===）&quot;&gt;&lt;/a&gt;一、相等操作符（==和===）&lt;/h4&gt;&lt;h5 id=&quot;1-相等操作符（-）&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://www.23ybob.club/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>工作中遇到的问题总结</title>
    <link href="https://www.23ybob.club/2018/10/15/cjsog2u5n0009xsvbqc9l4iyt/"/>
    <id>https://www.23ybob.club/2018/10/15/cjsog2u5n0009xsvbqc9l4iyt/</id>
    <published>2018-10-15T01:58:24.433Z</published>
    <updated>2018-10-15T06:39:38.705Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、element-ui-的使用总结"><a href="#一、element-ui-的使用总结" class="headerlink" title="一、element ui 的使用总结"></a>一、element ui 的使用总结</h3><h4 id="1-1-自定义验证规则的使用"><a href="#1-1-自定义验证规则的使用" class="headerlink" title="1.1. 自定义验证规则的使用"></a>1.1. 自定义验证规则的使用</h4><pre><code>在自定义验证规则的时候每一个判断里（if()else()或者if()else if() else()）都要有callback,否则表单在执行this.$refs[formName].validate((valid) =&gt; {}) 的时候，内部代码是不会执行的；&lt;el-form :model=&quot;ruleForm2&quot; status-icon :rules=&quot;rules2&quot; ref=&quot;ruleForm2&quot; label-width=&quot;100px&quot; class=&quot;demo-ruleForm&quot;&gt;    &lt;el-form-item label=&quot;密码&quot; prop=&quot;pass&quot;&gt;        &lt;el-input type=&quot;password&quot; v-model=&quot;ruleForm2.pass&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;    &lt;/el-form-item&gt;    &lt;el-form-item label=&quot;确认密码&quot; prop=&quot;checkPass&quot;&gt;        &lt;el-input type=&quot;password&quot; v-model=&quot;ruleForm2.checkPass&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;    &lt;/el-form-item&gt;    &lt;el-form-item label=&quot;年龄&quot; prop=&quot;age&quot;&gt;        &lt;el-input v-model.number=&quot;ruleForm2.age&quot;&gt;&lt;/el-input&gt;    &lt;/el-form-item&gt;    &lt;el-form-item&gt;        &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(&apos;ruleForm2&apos;)&quot;&gt;提交&lt;/el-button&gt;        &lt;el-button @click=&quot;resetForm(&apos;ruleForm2&apos;)&quot;&gt;重置&lt;/el-button&gt;    &lt;/el-form-item&gt;&lt;/el-form&gt;&lt;script&gt;export default {    data() {    var checkAge = (rule, value, callback) =&gt; {        if (!value) {            return callback(new Error(&apos;年龄不能为空&apos;));        }        setTimeout(() =&gt; {            if (!Number.isInteger(value)) {                callback(new Error(&apos;请输入数字值&apos;));            } else {                if (value &lt; 18) {                    callback(new Error(&apos;必须年满18岁&apos;));                } else {                    callback();//不能省略，不然无法执行                }            }        }, 1000);    };    var validatePass = (rule, value, callback) =&gt; {        if (value === &apos;&apos;) {                callback(new Error(&apos;请输入密码&apos;));            } else {            if (this.ruleForm2.checkPass !== &apos;&apos;) {                this.$refs.ruleForm2.validateField(&apos;checkPass&apos;);            }            callback();        }    };    var validatePass2 = (rule, value, callback) =&gt; {        if (value === &apos;&apos;) {            callback(new Error(&apos;请再次输入密码&apos;));        } else if (value !== this.ruleForm2.pass) {            callback(new Error(&apos;两次输入密码不一致!&apos;));        } else {            callback();        }    };    return {        ruleForm2: {        pass: &apos;&apos;,        checkPass: &apos;&apos;,        age: &apos;&apos;        },        rules2: {        pass: [            { validator: validatePass, trigger: &apos;blur&apos; }        ],        checkPass: [            { validator: validatePass2, trigger: &apos;blur&apos; }        ],        age: [            { validator: checkAge, trigger: &apos;blur&apos; }        ]        }    };    },    methods: {    submitForm(formName) {        this.$refs[formName].validate((valid) =&gt; {        if (valid) {            alert(&apos;submit!&apos;);        } else {            console.log(&apos;error submit!!&apos;);            return false;        }        });    },    resetForm(formName) {        this.$refs[formName].resetFields();    }    }}&lt;/script&gt;</code></pre><h4 id="1-2移动端ios以及andriod兼容问题"><a href="#1-2移动端ios以及andriod兼容问题" class="headerlink" title="1.2移动端ios以及andriod兼容问题"></a>1.2移动端ios以及andriod兼容问题</h4><h4 id="1-2-1-ios以及andriod使用overflow-scroll-遇到的问题；"><a href="#1-2-1-ios以及andriod使用overflow-scroll-遇到的问题；" class="headerlink" title="1.2.1 ios以及andriod使用overflow: scroll;遇到的问题；"></a>1.2.1 ios以及andriod使用overflow: scroll;遇到的问题；</h4><pre><code>页面滚动时使用overflow：scroll;在ios端会出现滑动不流畅问题。为了解决这个问题，首先我使用了-webkit-overflow-scrolling : touch;这个属性，发现使用这个属性以后，ios页面在滑动到底部或者顶部会出现页面卡死问题，在网上找了好多方法参考这篇文章https://hk.saowen.com/a/ba965995919b5f04ed8bcb7ccc5b4af1e95792e9769fd92a8d36881d1fad8683个人觉得这篇文章写得很好，试了一下这些方法，发现最后还是没有解决，最后发现不要用原生的滚动也就是overflow：scroll;并且阻止ios的默认滑动效果，改为使用better-scroll这个滚动插件完美解决了以上的问题；参考如下案例：&lt;template&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;contain-img wrapper&quot; ref=&quot;menuWrapper&quot; v-show=&quot;Show&quot; id=&quot;contain-img&quot;&gt;            &lt;ul class=&quot;content&quot; id=&quot;content&quot; ref=&quot;content&quot;&gt;                //合同图片显示                &lt;div class=&quot;img01&quot; id=&quot;img01&quot;&gt;&lt;img src=&quot;../../static/img/demo-detail01.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;                &lt;div class=&quot;img02&quot;&gt;                    &lt;img id=&quot;img01&quot; src=&quot;../../static/img/demo-detail02.png&quot; alt=&quot;&quot;&gt;                &lt;/div&gt;            &lt;/ul&gt;        &lt;/div&gt;        &lt;div class=&quot;pact-sign&quot; v-show=&quot;isSubmit&quot; @click=&quot;sign()&quot;&gt;提交&lt;/div&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    import BScroll from &apos;better-scroll&apos;    export default {        data() {            return {                contractImg: &apos;&apos;,                isSubmit: true,                Show: true            }        },        created() {            this.$nextTick(()=&gt;{ //异步执行                setTimeout(() =&gt; {                    let containImg = document.getElementById(&quot;img01&quot;).offsetHeight;                    let bodyHeight = document.body.clientHeight;                    let distance = bodyHeight-containImg;                    let scrollHeight = containImg-distance;                    this.meunScroll=new BScroll(this.$refs.menuWrapper,{});//初始化better-scroll插件                    this.meunScroll.scrollTo(0,-scrollHeight); //页面加载完滚动到某个位置                }, 100)              });            this.$nextTick(function(){                document.getElementsByTagName(&quot;img&quot;)[0].onload =function() {                    document.body.addEventListener(&apos;touchmove&apos;, function (e) {                        e.preventDefault() // 阻止默认的处理方式(阻止下拉滑动的效果)                    }, {passive: false}) // passive 参数不能省略，用来兼容ios和android                }            });              },        beforeCreate() {            document.title = &apos;签署确认&apos;;        },    }&lt;/script&gt;&lt;style scoped&gt;*{    margin: 0;    padding: 0;}body, html {    height: 100%;    width: 100%;    background-color: #fff;}.container {    width: 100%;    height: 100%;}.contain-img {    width: 100%;    height: 100%;    position: absolute;    /* overflow: scroll;    -webkit-overflow-scrolling : touch; */}.container img {    width: 100%;    height: 100%;}.pact-sign {    width: 40px;    height: 40px;    line-height: 40px;    position: fixed;    bottom: 40px;    right: 20px;    border-radius: 50%;    background-color: #409EFF;    text-align: center;    color: #ffffff;    z-index: 10;}.img01, .img02 {    position: relative;    overflow: hidden;}&lt;/style&gt;</code></pre><h4 id="1-3-prop以及attr的使用"><a href="#1-3-prop以及attr的使用" class="headerlink" title="1.3 prop以及attr的使用"></a>1.3 prop以及attr的使用</h4><pre><code>使用attr获取checked属性、disabled属性、select属性，如果这些属性默认选中可以取到值，如果未选中值返回undefined，使用prop则可以解决这些问题官方文档建议：具有 true 和 false 两个属性的属性，如 checked, selected 或者 disabled 使用prop()，其他的使用 attr()；</code></pre><h4 id="1-4-npm打包卡死问题"><a href="#1-4-npm打包卡死问题" class="headerlink" title="1.4 npm打包卡死问题"></a>1.4 npm打包卡死问题</h4><pre><code>修改为淘宝源：（npm config set registry http://registry.cnpmjs.org）；</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、element-ui-的使用总结&quot;&gt;&lt;a href=&quot;#一、element-ui-的使用总结&quot; class=&quot;headerlink&quot; title=&quot;一、element ui 的使用总结&quot;&gt;&lt;/a&gt;一、element ui 的使用总结&lt;/h3&gt;&lt;h4 id=&quot;1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue slot使用小结</title>
    <link href="https://www.23ybob.club/2018/10/11/cjsog2u5k0006xsvb4cy3mhwa/"/>
    <id>https://www.23ybob.club/2018/10/11/cjsog2u5k0006xsvb4cy3mhwa/</id>
    <published>2018-10-11T08:51:22.124Z</published>
    <updated>2018-10-15T01:57:11.048Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、slot简介"><a href="#一、slot简介" class="headerlink" title="一、slot简介"></a>一、slot简介</h3><p>在vue实际项目开发当中，我们经常会把父组件的内容与子组件自己的模板混合起来使用。而这样的一个过程在Vue中被称为内容分发。<br>在Vue中，slot也分多种，从Vue的官网中可以获知，其主要分为：单个插槽、具名插槽和作用域插槽三种。<br>下面就逐一介绍这三种插槽的用法：</p><h3 id="二、slot插槽具体用法"><a href="#二、slot插槽具体用法" class="headerlink" title="二、slot插槽具体用法"></a>二、slot插槽具体用法</h3><h4 id="2-1单个插槽的使用"><a href="#2-1单个插槽的使用" class="headerlink" title="2.1单个插槽的使用"></a>2.1单个插槽的使用</h4><p>从官网中（<a href="https://cn.vuejs.org/）我们知道，如果子组件template中没有包含任何一个" target="_blank" rel="noopener">https://cn.vuejs.org/）我们知道，如果子组件template中没有包含任何一个</a><slot>时，就算父组件分发再多的内容也将会被丢弃。如下案例：</slot></p><pre><code>子组件slotChildren组件，&lt;template&gt;    &lt;div&gt;        &lt;header&gt;slotchildrenheader&lt;/header&gt;        &lt;main&gt;这是子组件的内容&lt;/main&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    &lt;/script&gt;父组件slotdemo组件&lt;template&gt;    &lt;div class=&quot;Slotdemo&quot;&gt;        &lt;slotChildren&gt;            &lt;div&gt;为子组件添加新内容&lt;/div&gt;        &lt;/slotChildren&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    import slotChildren from &apos;./slotChildren.vue&apos;    export default {        name: &quot;Slotdemo&quot;,        components: {            slotChildren        }    } &lt;/script&gt;</code></pre><p>页面渲染结果如下图：<br>上图所示在<slotchildren></slotchildren>中添加内容并不会显示<br><img src="/2018/10/11/cjsog2u5k0006xsvb4cy3mhwa/slot-01.png" alt="slot演示"></p><p>只有子组件模板只中拥有一个没有属性的slot（可以有多个带属性的slot，后面的内容会介绍），父组件传入的整个内容片段才会被插入到slot所在的位置，并将替换掉slot本身，如果传入的内容为空则会显示slot的默认内容。如下案例：</p><pre><code>父组件slotdemo&lt;template&gt;    &lt;div class=&quot;Slotdemo&quot;&gt;        &lt;slotChildren&gt;            &lt;div&gt;为子组件添加新内容&lt;/div&gt;        &lt;/slotChildren&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    import slotChildren from &apos;./slotChildren.vue&apos;    export default {        name: &quot;Slotdemo&quot;,        components: {            slotChildren        }    }&lt;/script&gt;子组件slotChildren组件，&lt;template&gt;&lt;div&gt;    &lt;header&gt;slotchildrenheader&lt;/header&gt;    &lt;main&gt;这是子组件的内容&lt;/main&gt;    &lt;slot&gt;新添加内容显示在此显示&lt;/slot&gt;//派发的内容显示在这里&lt;/div&gt;&lt;/template&gt;&lt;script&gt;&lt;/script&gt;</code></pre><p>页面渲染结果如下图：<br><img src="/2018/10/11/cjsog2u5k0006xsvb4cy3mhwa/slot-02.png" alt="slot演示"></p><p>当派发的内容为空时，会默认显示slot的内容</p><pre><code>父组件slotdemo&lt;template&gt;    &lt;div class=&quot;Slotdemo&quot;&gt;        &lt;slotChildren&gt;        &lt;/slotChildren&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    import slotChildren from &apos;./slotChildren.vue&apos;    export default {        name: &quot;Slotdemo&quot;,        components: {            slotChildren        }    }&lt;/script&gt;子组件slotChildren组件，&lt;template&gt;&lt;div&gt;    &lt;header&gt;slotchildrenheader&lt;/header&gt;    &lt;main&gt;这是子组件的内容&lt;/main&gt;    &lt;slot&gt;新添加内容显示在此显示&lt;/slot&gt;//派发的内容显示在这里&lt;/div&gt;&lt;/template&gt;&lt;script&gt;&lt;/script&gt;</code></pre><p>页面渲染结果如下图：<br><img src="/2018/10/11/cjsog2u5k0006xsvb4cy3mhwa/slot-03.png" alt="slot演示">  </p><h4 id="2-2具名插槽的使用"><a href="#2-2具名插槽的使用" class="headerlink" title="2.2具名插槽的使用"></a>2.2具名插槽的使用</h4><p><slot>可以用一个特殊的属性name来配置父组件如何分发内容。多个插槽可以有不同的名字。具名插槽将根据name属性匹配内容片段中有对应slot属性的元素。</slot></p><pre><code>父组件slotdemo&lt;template&gt;    &lt;div class=&quot;Slotdemo&quot;&gt;        &lt;slotChildren&gt;            &lt;div slot=&quot;header&quot;&gt;新的slotchildrenheader&lt;/div&gt;            &lt;div slot=&quot;main&quot;&gt;新的内容&lt;/div&gt;            &lt;div&gt;没有name&lt;/div&gt;        &lt;/slotChildren&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    import slotChildren from &apos;./slotChildren.vue&apos;    export default {        name: &quot;Slotdemo&quot;,        components: {            slotChildren        }    }  &lt;/script&gt;子组件slotChildren组件，&lt;template&gt;    &lt;div&gt;        &lt;header&gt;slotchildrenheader            &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;            &lt;slot&gt;&lt;/slot&gt;//如果匹配不到内容显示在这        &lt;/header&gt;        &lt;main&gt;&lt;slot name=&quot;main&quot;&gt;&lt;/slot&gt;这是子组件的内容&lt;/main&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;&lt;/script&gt;</code></pre><p>页面渲染结果如下图：<br><img src="/2018/10/11/cjsog2u5k0006xsvb4cy3mhwa/slot-04.png" alt="slot演示">  </p><h4 id="2-3作用域插槽的使用"><a href="#2-3作用域插槽的使用" class="headerlink" title="2.3作用域插槽的使用"></a>2.3作用域插槽的使用</h4><p>作用域插槽是一种特殊类型的插槽，用作一个（能被传递数据的）可重用模板，来代替已经渲染好的元素。</p><pre><code>在子组件中，只需将数据传递到插槽，就像你将prop传递给组件一样：&lt;template&gt;    &lt;div&gt;        &lt;header&gt;slotchildrenheader&lt;/header&gt;        &lt;main&gt;这是子组件的内容&lt;slot :text=&quot;msg&quot;&gt;&lt;/slot&gt;&lt;/main&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    export default {        name: &apos;&apos;,        data() {            return {                msg: &quot;slot分发内容&quot;,            }        },    }&lt;/script&gt;在父组件中，具有特殊特性 slot-scope 的 &lt;template&gt; 元素必须存在，表示它是作用域插槽的模板。slot-scope 的值将被用作一个临时变量名，此变量接收从子组件传递过来的 prop 对象。&lt;template&gt;    &lt;div class=&quot;Slotdemo&quot;&gt;        &lt;slotChildren&gt;            &lt;template slot-scope=&quot;props&quot;&gt;//作用域模板插槽必须存在                &lt;div&gt;新的slotchildrenheader&lt;/div&gt;                &lt;div&gt;新的内容&lt;div&gt;{{props.text}}&lt;/div&gt;&lt;/div&gt;            &lt;/template&gt;        &lt;/slotChildren&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    import slotChildren from &apos;./slotChildren.vue&apos;    export default {        name: &quot;Slotdemo&quot;,        components: {            slotChildren        }    }&lt;/script&gt;</code></pre><p>页面渲染结果如下图：<br><img src="/2018/10/11/cjsog2u5k0006xsvb4cy3mhwa/slot-05.png" alt="slot演示">  </p><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>这篇文章主要介绍vue中的<slot>插槽的使用方法。<slot>只是一个空壳子，他的显示以及如何显示手父组件的控制，插槽显示的位置由子组件自身决定。<br>父组件传过来的模板显示<slot>组件的template。<br>使用slot可以帮助我们更容易，灵活的使用组件，同时也提高了组件的复用性。</slot></slot></slot></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、slot简介&quot;&gt;&lt;a href=&quot;#一、slot简介&quot; class=&quot;headerlink&quot; title=&quot;一、slot简介&quot;&gt;&lt;/a&gt;一、slot简介&lt;/h3&gt;&lt;p&gt;在vue实际项目开发当中，我们经常会把父组件的内容与子组件自己的模板混合起来使用。而这样的一
      
    
    </summary>
    
    
      <category term="slot" scheme="https://www.23ybob.club/tags/slot/"/>
    
      <category term="vue" scheme="https://www.23ybob.club/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>javascript权威指南理解片一</title>
    <link href="https://www.23ybob.club/2018/08/27/cjsog2u5j0005xsvbzz6pv3gm/"/>
    <id>https://www.23ybob.club/2018/08/27/cjsog2u5j0005xsvbzz6pv3gm/</id>
    <published>2018-08-27T05:38:29.000Z</published>
    <updated>2018-08-30T05:21:17.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h2><pre><code>eval函数执行另一段javascript代码;eval(&quot;function f() {return x + 1}&quot;);//eval函数只有一个参数，如果参数不是字符串则直接返回这个函数console.log(eval(11)); //11//如果参数是字符串则会将字符串当做javascript代码进行编译执行//并且返回最后一个表达式或语句得值，如果最后一个表达式或语句没有值则返回undefined；//eval使用的作用域是调用他的作用域；如果eval调用了全局函数，则返回的是全局变量的值，如果eval调用了局部函数，他会返回局部变量的值；var geval = eval;var x = &quot;global&quot;, y = &quot;global&quot;;function f() {    var x = &quot;local &quot;;    eval(&quot;x += &apos;changed&apos;;&quot;) //改变局部变量x的值    return x;}function g() {    var y = &quot;local&quot;;    geval(&quot;y += &apos; changed&apos;;&quot;); //改变全局变量y的值    return y;}console.log(f(), x); //local changed globalconsole.log(g(), y); //local global changed</code></pre><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><pre><code>x &gt; 0 ? x : -x 条件运算符的操作数可以是任意类型，第一个操作符如果是真值，那么返回第二个操作符的结果，如果第一个操作符是假值，则返回第三个操作符的结果；</code></pre><h3 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;eval函数&quot;&gt;&lt;a href=&quot;#eval函数&quot; class=&quot;headerlink&quot; title=&quot;eval函数&quot;&gt;&lt;/a&gt;eval函数&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;eval函数执行另一段javascript代码;

eval(&amp;quot;function 
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://www.23ybob.club/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>drafting</title>
    <link href="https://www.23ybob.club/2018/08/21/cjsog2u580000xsvbrkjmjpkp/"/>
    <id>https://www.23ybob.club/2018/08/21/cjsog2u580000xsvbrkjmjpkp/</id>
    <published>2018-08-21T06:46:21.000Z</published>
    <updated>2018-11-23T06:16:27.947Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现目标div在另一个div中的拖拽效果"><a href="#实现目标div在另一个div中的拖拽效果" class="headerlink" title="实现目标div在另一个div中的拖拽效果"></a>实现目标div在另一个div中的拖拽效果</h3><p>最近项目中遇到的一个小功能，总结了一下，感觉还不错.<br>github地址： <a href="https://github.com/Abriams/js-drafting" target="_blank" rel="noopener">https://github.com/Abriams/js-drafting</a></p><pre><code>&lt;!DOCTYPE html&gt;    &lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot; /&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;        &lt;title&gt;Page Title&lt;/title&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;        &lt;style&gt;            *{                margin: 0;                padding: 0;            }            #draft_big {                  border: 1px solid #FF3300;                  width: 300px;                  height: 300px;                  position: relative;                  margin-left: 400px;                margin-top: 400px;            }              #draft_small {                  background: #99CC00;                  width: 50px;                  height: 50px;                  position: absolute;                  cursor: pointer;                  right: -80px;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;          &lt;div id=&quot;draft_big&quot;&gt;              &lt;div id=&quot;draft_small&quot;&gt;&lt;/div&gt;          &lt;/div&gt;      &lt;/body&gt;      &lt;script language=&quot;javascript&quot;&gt;          window.onload = function () {            var draftBig = document.getElementById(&quot;draft_big&quot;);              var draftSmall = document.getElementById(&quot;draft_small&quot;);              draftSmall.onmousedown = function (event) {                var e = e || window.event;                  //记录并保存可拖拽div（id为draftSmall的盒子）拖拽前的坐标                 var startX = e.clientX - draftSmall.offsetLeft;                var startY = e.clientY - draftSmall.offsetTop;                // offsetHeight,包括元素的边框、内边距和元素的水平滚动条（如果存在且渲染的话）;                // offsetLeft,目标元素距离最近定位的父级元素左边的距离；                // offsetTop,目标元素距离最近定位的父级元素上边的距离；                // clientX 事件属性返回当事件被触发时鼠标指针向对于浏览器页面（或客户区）的水平坐标。                // clientY 事件属性返回当事件被触发时鼠标指针向对于浏览器页面（或客户区）的垂直坐标。                /*鼠标的移动事件*/                  document.onmousemove = function(e) {                     //判断被拖拽的盒子（id为draftSmall的盒子）必须拖拽到目标盒子（id为draftBig盒子中）才能移动；                    if(e.clientX - 400 &lt; draftBig.offsetHeight &amp;&amp; e.clientX &gt; 400) {                        if(e.clientY -400 &lt; draftBig.offsetWidth &amp;&amp; e.clientY &gt; 400) {                            var e = e || window.event;                              //计算当前拖拽的盒子（id为draftSmall的盒子）在目标盒子（id为draftBig盒子）中的坐标；                            draftSmall.style.left = e.clientX - startX + &quot;px&quot;;                              draftSmall.style.top = e.clientY - startY + &quot;px&quot;;                              /*判断拖拽边界（id为draftSmall的盒子四个边界的判断）*/                              if (e.clientX - startX &lt;= 0) {                                  draftSmall.style.left = 0 + &quot;px&quot;;                              }                              if (e.clientY - startX &lt;= 0) {                                  draftSmall.style.top = 0 + &quot;px&quot;;                              }                              if (e.clientX - startX &gt;= 250) {                                  draftSmall.style.left = 250 + &quot;px&quot;;                              }                              if (e.clientY - startX &gt;= 250) {                                  draftSmall.style.top = 250 + &quot;px&quot;;                              }                          }                    }                };                  /*鼠标的抬起事件,终止拖动*/                  document.onmouseup = function() {                      document.onmousemove = null;                      document.onmouseup = null;                  };              };        };     &lt;/script&gt;    &lt;/html&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;实现目标div在另一个div中的拖拽效果&quot;&gt;&lt;a href=&quot;#实现目标div在另一个div中的拖拽效果&quot; class=&quot;headerlink&quot; title=&quot;实现目标div在另一个div中的拖拽效果&quot;&gt;&lt;/a&gt;实现目标div在另一个div中的拖拽效果&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="js实现拖拽" scheme="https://www.23ybob.club/tags/js%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD/"/>
    
  </entry>
  
  <entry>
    <title>认识es6</title>
    <link href="https://www.23ybob.club/2018/08/15/cjsog2upg000oxsvblde73e2m/"/>
    <id>https://www.23ybob.club/2018/08/15/cjsog2upg000oxsvblde73e2m/</id>
    <published>2018-08-15T02:02:07.000Z</published>
    <updated>2018-08-16T06:31:37.901Z</updated>
    
    <content type="html"><![CDATA[<h3 id="es6常用api介绍"><a href="#es6常用api介绍" class="headerlink" title="es6常用api介绍"></a>es6常用api介绍</h3><h4 id="一、let和const命令介绍及区别"><a href="#一、let和const命令介绍及区别" class="headerlink" title="一、let和const命令介绍及区别"></a>一、let和const命令介绍及区别</h4><h5 id="1-let命令："><a href="#1-let命令：" class="headerlink" title="1. let命令："></a>1. let命令：</h5><p>1）、基本用法：<br>    es5只有两种方式声明变量var以及function，es6新增了四种let、const、import、class；<br>    let声明的变量的方式与var相似，但是声明的变量，只在let命令所在的代码块中生效;</p><pre><code>{    let a = 1;    var b = 2;}console.log(a);//Error in created hook: &quot;ReferenceError: a is not defined&quot;console.log(b);//2上面在代码块中使用let，var分别声明了连个变量，然后再代码块外面调用，let声明的变量会报错，var声明的返回值正常，表明let只在它所在的代码块中生效；</code></pre><p>2）、let不存在变量提升问题<br>    我们知道使用var声明的变量会存在变量提升问题，但是在let中不存在这种现象</p><pre><code>console.log(a);//undefinedvar a = 1;console.log(b);//报错let b = 2;上述代码中，使用let声明了变量b，在声明之前使用会报错，而使用var声明的变量，在使用前值是undefined；</code></pre><p>3）、暂时性死区<br>在es6中规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域，在声明前使用这些变量就会报错；</p><pre><code>var a = 1;{    a = 3;    console.log(a);//报错    let a;}</code></pre><p>4）、不允许重复声明<br>let不允许在相同作用域内重复声明同一个变量</p><pre><code>// 报错function fn1() {    let a = 1;    var a = 2;}// 报错function fn2() {    let a = 1;    let a = 2;}function fn3(argements) {    let argements; // 也会报错}</code></pre><p>es6规定暂时性死区，以及let，const语句不提升变量，主要是为了减少运行时错误，防止在变量声明前就是用这个变量。从而导致意料之外的行为；</p><h5 id="1-const命令："><a href="#1-const命令：" class="headerlink" title="1. const命令："></a>1. const命令：</h5><p>const声明一个常量，一旦声明，常量的值就不能改变了，所以const在声明是必须立即初始化，不能留到以后赋值，如果修改它的值会报错</p><pre><code>const index = 1;console.log(index)//1index = 3;// 报错const num;报错const声明的常量也不存在变量提升，同样的也是有暂时性死区，也不能重复声明变量</code></pre><h4 id="二、块级作用域"><a href="#二、块级作用域" class="headerlink" title="二、块级作用域"></a>二、块级作用域</h4><h5 id="1、块级作用域的用处"><a href="#1、块级作用域的用处" class="headerlink" title="1、块级作用域的用处"></a>1、块级作用域的用处</h5><p>在es5中只有全局作用域以及函数作用域，在许多情况下使用很不方便</p><pre><code>var num = 1;function f() {    console.log(num);    if (false) {        var num = 2;    }}f(); // undefined//在上述代码中在函数内部声明的变量覆盖了外层声明的变量；var index = &apos;hello&apos;;for (var i = 0; i &lt; s.length; i++) {    console.log(s[i]);}console.log(i); // 5//在for循环中的计数变量会泄露到全局</code></pre><h5 id="2、es6中的块级作用域"><a href="#2、es6中的块级作用域" class="headerlink" title="2、es6中的块级作用域"></a>2、es6中的块级作用域</h5><pre><code>function fn1() {    let i = 5;    if (true) {        let i = 10;    }    console.log(n); // 5}//上述代码中存在两个代码块，都声明了变量i，在运行后输出5，说明function声明的代码块不受if(){}代码块的影响{    {        {let i = 5}；        console.log(i)//报错    }}//let只在当前代码块中生效,其他代码块中是无法使用的，在es6中允许使用作用域的任意嵌套{{{        let i = 1;        {let i = 2};//不报错，不同的作用域中可以声明同一个变量}}}</code></pre><h5 id="3、块级作用域域函数作用域"><a href="#3、块级作用域域函数作用域" class="headerlink" title="3、块级作用域域函数作用域"></a>3、块级作用域域函数作用域</h5><p>在es5中函数只能在顶层作用域中以及函数作用域中声明，不能再块级作用域中声明，而es6中则可以在块级作用域中声明函数，在块级作用域中声明的函数只在当前作用域中生效，对其他作用域不会造成影响；另外，es6的块级作用域内声明函数必须使用大括号，如果没有会报错</p><pre><code>// 不报错if (true) {    function f() {}}// 报错if (true)function f() {}</code></pre><h4 id="三、变量的解构赋值"><a href="#三、变量的解构赋值" class="headerlink" title="三、变量的解构赋值"></a>三、变量的解构赋值</h4><h5 id="1、数组的解构赋值"><a href="#1、数组的解构赋值" class="headerlink" title="1、数组的解构赋值"></a>1、数组的解构赋值</h5><p>在es6以前为变量赋值只能指定值</p><pre><code>let a = 1;let b = 2;let c = 3;</code></pre><p>上述代码在es6中可以住这样写</p><pre><code>let [a, b, c] = [1, 2, 3];//a=1,b=2,c=3//只要等号两边的模式相同，左边的变量就会被赋值对应的值{    let [x, y] = [1, 2, 3] //x=1,y=2};{    let [x, ,y] = [1, 2, 3] //x=1,y=3};{    let [x, [y], [z]] = [1, [2], [3]] //x=1,y=2,z=3};{    let [x, ...y] = [1, 2, 3, 4] //x=1,y=[2,3,4]};{    let [x, y, ...z] = [1] //x=1,y=undefined,z=[]};</code></pre><p>如果结构不成功就会返回undefined</p><pre><code>{    let x = []; //x = undefined;}{    let [x, y] = [1] //y =undefined;}    </code></pre><p>如果等号左边的变量只能匹配等号右边变量的一部分值，这种情况就是不完全解构，但是解构依然会成功；</p><pre><code>{    let [x, y] = [1, 2, 3] //x=1,y=2;}{    let [x, [y], z] = [1, [2, 4], 3] //x=1,y=2,z=3;}</code></pre><p>如果等号右边不是数组（不可遍历的结构）就会报错</p><pre><code>{    let [x] = 1;    let [y] = false;    let [z] = NaN;    let [a] = undefined;    let [b] = null;    let [c] = {};}</code></pre><p>结构赋值允许指定默认值</p><pre><code>{    let [x = 1] = [];//x = 1    let [i, n = 2] = [1];//i=1,n=2    let [a = 1, b = 2] = [3]//a=3,b=2}</code></pre><p>在es6内部使用严格相等运算符（===），来判断一个位置是否有值，所以只有一个数组成员严格等于undefined默认值才会生效</p><pre><code>{    let [x = 1] = [undefined] //x=1     let [y = 2] = [null] //y=null,以为null===undefined不成立；   }</code></pre><p>如果默认是一个表达式，那么这个表达式只有在用到的时候才会求值</p><pre><code>{    function fn() {        console.log(111);    }    let [x = f()] = [1];//fn不会执行,因为x能取到值1}</code></pre><p>默认值也可以使用解构赋值的其他变量，但是该变量必须先声明</p><pre><code>{    let [x = 1, y = x] = [] //x= 1;y =2  }{    let [x = 1, y = x] = [2] //x=2,y=2}{    let [x = y, y = 1] = [] //报错 y is not defined，因为y还没有声明}</code></pre><h5 id="2、对象的解构赋值"><a href="#2、对象的解构赋值" class="headerlink" title="2、对象的解构赋值"></a>2、对象的解构赋值</h5><p>对象的结构和数组类似，但是数组的解构按数组的顺序一次取值，而对象是没有顺序的，变量名必须与属性名一直才能取到正确的值；</p><pre><code>{    let {bar, foo} = {foo: 1, bar: 2} //foo:1,bar:2;    let {bar1} = {foo1: 1, bar2: 2} //bar1的值为undefined；}</code></pre><p>如果变量名与属性名不一致，必须要写成如下形式</p><pre><code>{    let {foo: foo1} = {foo: 1} //foo1:1    let foo2 = {num1: 10, num2: 20  };    let {num1: f1, num2: f2} = foo2; //f1:10, f2:20;}</code></pre><p>变量结构的机制是先找到同名的属性，然后在赋值给对应的变量，如下：</p><pre><code>{    let {bar: foo1} = {bar: 10, bar1: 20} //foo1:10; bar: error: bar is not defined    //bar 只是匹配的模式，foo1才是变量，真正被赋值的是变量foo1而不是模式bar}</code></pre><p>与数组解构一样对象的解构也可以嵌套  </p><pre><code>{    let foo = {        index: [            10,            {                y: 20            }        ]    }    let {index:[x, {y}]} = foo;//x:10,y:20}</code></pre><p>对象结构中要注意赋值的是变量，而不是模式，模式只是用来匹配变量的</p><pre><code>{    let obj = {        foo: {            index: {                num: 1,                col: 2            }        }    }     let {foo:{index: {num,col}}} = obj; //num:1, col:2}</code></pre><p>对象的解构也可以指定默认值</p><pre><code>{    let {x=1} = {} //x=3}{    let {x: y= 1} = {} // y = 3;}{    let {x: y= 1} = {null} // y:null;}//和数组一样默认值生效的条件也是严格等于undefined</code></pre><p>如果解构失败，变量的值是undefined</p><pre><code>{    let {foo} = {bar: 1} //foo:undefined}</code></pre><p>如果解构模式是嵌套的对象，如果子对象所在的父对象不存在，则会报错</p><pre><code>{    let {foo: {bar}} = {x: 1} //报错}</code></pre><p>解构赋值允许等号左边的模式中，不放置任何变量名，因此如下写法是可以执行的</p><pre><code>{    ({} = [1, 2])    ({} = &apos;abc)    ({} = [])}</code></pre><p>也可以对数组进行对象属性的解构</p><pre><code>{    let arr = [1, 2, 3];    let {0: f1, [arr.length-1]: f2} = arr //f1:1, f2:3}</code></pre><h5 id="2、字符串的解构赋值"><a href="#2、字符串的解构赋值" class="headerlink" title="2、字符串的解构赋值"></a>2、字符串的解构赋值</h5><pre><code>字符串在解构的时候会被转换成一个类似数组的对象{    let [A, B, C, D] = &apos;abcd&apos;;    //A:a,B:b,C:c,D:d;} </code></pre><h5 id="3、数值和布尔值的解构赋值"><a href="#3、数值和布尔值的解构赋值" class="headerlink" title="3、数值和布尔值的解构赋值"></a>3、数值和布尔值的解构赋值</h5><p>数值和布尔值的解构赋值会先转成对象（隐式调用toString方法）</p><pre><code>{    let {toString: s} = 123;//true    s === Number.prototype.toString(隐式调用)}{    let {toString: s} = true;//true    s === Boolean.prototype.toString }{    let { prop: x } = undefined; // TypeError    let { prop: y } = null; // TypeError    //undefined,null无法转成对象}</code></pre><h5 id="4、函数参数的解构赋值"><a href="#4、函数参数的解构赋值" class="headerlink" title="4、函数参数的解构赋值"></a>4、函数参数的解构赋值</h5><pre><code>{    function fn([x, y]) {        return x + y;    }    fn([1, 2]);//3}</code></pre><p>函数参数的结解构也可以指定默认值</p><pre><code>{    function fn({x=3, y=4} = {}) {        return [x, y]    }    fn({x:10, y:20});// [10, 20]    fn(); // [3, 4]}</code></pre><h4 id="四、圆括号的使用"><a href="#四、圆括号的使用" class="headerlink" title="四、圆括号的使用"></a>四、圆括号的使用</h4><p>es6对于圆括号的规则是可能导致解构发生歧义，就不能使用圆括号</p><h5 id="1、不能使用圆括号的场景"><a href="#1、不能使用圆括号的场景" class="headerlink" title="1、不能使用圆括号的场景"></a>1、不能使用圆括号的场景</h5><p>(1). 变量的声明赋值 </p><pre><code>{    let [(a)] = [1];    let {x: (c)} = {};    let ({x: c}) = {};    let {(x: c)} = {};    let {(x): c} = {};    let { o: ({ p: p }) } = { o: { p: 2 } };    //上面6个语句都会报错，因为它们都是变量声明语句，模式中不能使用圆括号}</code></pre><p>(2). 函数参数</p><pre><code>{    function f([(z)]) { return z; } // 报错    function f([z,(x)]) { return x; } // 报错    //函数参数也属于变量声明，因此不能带有圆括号。}</code></pre><p>(3). 赋值语句的模式</p><pre><code>{    ({ p: a }) = { p: 42 }; //报错    ([a]) = [5];//报错}</code></pre><h5 id="1、能使用圆括号的场景"><a href="#1、能使用圆括号的场景" class="headerlink" title="1、能使用圆括号的场景"></a>1、能使用圆括号的场景</h5><p>(1). 赋值语句的非模式部分，可以使用圆括号。</p><pre><code>{    [(b)] = [3]; // 正确    ({ p: (d) } = {}); // 正确    [(parseInt.prop)] = [3]; // 正确}</code></pre><h4 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h4><h5 id="1、箭头函数的使用"><a href="#1、箭头函数的使用" class="headerlink" title="1、箭头函数的使用"></a>1、箭头函数的使用</h5><p>在es6中允许使用“箭头”（=&gt;）定义函数</p><pre><code>{    var f = fn =&gt; v    //以上代码等同于    var f = function fn(v) {        return v    }}</code></pre><p>基本语法</p><pre><code>{    用法一：参数1（单一参数） =&gt; {函数声明} //一个参数，多个执行语句    用法二：（参数1）（单一参数） =&gt; 表达式（只有一条语句）//单个参数一条执行语句    用法三：(参数1，参数2，... , 参数n) =&gt; {函数声明} //多个参数，多个执行语句    用法四：(参数1，参数2，... , 参数n) =&gt; 表达式（只有一条语句）//相当于(参数1, 参数2, …, 参数N) =&gt;{ return 表达式; }//多个参数，一条语句    用法五： () =&gt; {函数声明} //没有参数时使用()代替}</code></pre><p>其他使用</p><pre><code>{    var f = bar =&gt; ({foo: bar})    console.log(f(1)); //{foo: 1}    //箭头函数如果想直接返回一个对象必须在对象外面加()，不然会报错}{    (参数1, 参数2, ...rest) =&gt; {函数声明}    (参数1 = 默认值1,参数2, …, 参数N = 默认值N) =&gt; {函数声明}    //可以使用默认参数以及剩余参数}{    let f = ([a, b] = [1, 2], {x: c} = {x: a + b}) =&gt; a + b + c;    f();  // 6    //也可以使用解构}</code></pre><p>如果箭头函数不需要参数或者需要多个参数，则使用一个()代表参数部分</p><pre><code>{    var f1 = () =&gt; x //等同于 var f1 = function() {return x}}{    var f1 = (index1, index2) =&gt; index1 + index2;    //等同于var f1 = function(index1, index2) {return index1+index2}}</code></pre><p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。</p><pre><code>{    var f1 = (index1, index2) =&gt; {        return index1 + index2;    }}</code></pre><h5 id="2、箭头函数注意点"><a href="#2、箭头函数注意点" class="headerlink" title="2、箭头函数注意点"></a>2、箭头函数注意点</h5><p>（1）、箭头函数内部的this是固定的，就是定义时所在的对象，而不是使用时调用的对象；<br>（2）、不能当做构造函数使用，如果和new一起使用会抛出错误；<br>（3）、箭头函数内部不存在arguments对象，但是可以用rest参数代替arguments对象；<br>（4）、call 或 apply 调用在箭头函数中不能修改this指针，他们的第一个参数会被忽略<br>（5）、箭头函数没有prototype属性。<br>（6）、箭头函数在参数和箭头之间不能换行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;es6常用api介绍&quot;&gt;&lt;a href=&quot;#es6常用api介绍&quot; class=&quot;headerlink&quot; title=&quot;es6常用api介绍&quot;&gt;&lt;/a&gt;es6常用api介绍&lt;/h3&gt;&lt;h4 id=&quot;一、let和const命令介绍及区别&quot;&gt;&lt;a href=&quot;#一、l
      
    
    </summary>
    
    
      <category term="es6" scheme="https://www.23ybob.club/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>从零开始使用github page + hexo搭建个人博客</title>
    <link href="https://www.23ybob.club/2018/07/23/cjsog2upj000qxsvbpbqviur8/"/>
    <id>https://www.23ybob.club/2018/07/23/cjsog2upj000qxsvbpbqviur8/</id>
    <published>2018-07-23T02:44:09.714Z</published>
    <updated>2018-08-21T09:29:49.374Z</updated>
    
    <content type="html"><![CDATA[<p>首先附上我使用hexo搭建的博客：<a href="https://23ybob.club/" target="_blank" rel="noopener">https://23ybob.club/</a><br>github地址: <a href="https://github.com/Abriams/Abriams.github.io" target="_blank" rel="noopener">https://github.com/Abriams/Abriams.github.io</a></p><p>简介：个人刚使用hexo+github page搭建完博客，感觉还是很有成就感，所以把自己的一些在搭建过程中遇到的问题总结了一下，并为大家介绍hexo的详细配置，如何将hexo布置到github上，以及最后绑定域名</p><p>写在前面：我是一名前端开发人员，经常都会浏览别人的博客，感觉很高大上，一直以后也希望有一个属于自己的博客，虽然以前也搭建过博客，但是做的不是很精细，博客也没有去维护，最近看了别人的文章感触挺深，所以参考一些资料自己完完全全搭建了一个博客，总体来说很简单，如果你是一名程序开发爱好者，刚好你也想搭建自己的博客，你可以认认真真阅读这篇文章，相信对你搭建博客会有很大帮助</p><p>废话不多说，直接开始搭建过程</p><h2 id="一、安装搭建必须软件"><a href="#一、安装搭建必须软件" class="headerlink" title="一、安装搭建必须软件"></a>一、安装搭建必须软件</h2><h3 id="1-安装node-js-直接去node官网下载自己需要的版本即可，这个应该不用多说了吧"><a href="#1-安装node-js-直接去node官网下载自己需要的版本即可，这个应该不用多说了吧" class="headerlink" title="1. 安装node.js(直接去node官网下载自己需要的版本即可，这个应该不用多说了吧)"></a>1. 安装node.js(直接去node官网下载自己需要的版本即可，这个应该不用多说了吧)</h3><h3 id="2-安装git（https-git-scm-com-download-win）"><a href="#2-安装git（https-git-scm-com-download-win）" class="headerlink" title="2. 安装git（https://git-scm.com/download/win）"></a>2. 安装git（<a href="https://git-scm.com/download/win）" target="_blank" rel="noopener">https://git-scm.com/download/win）</a></h3><h4 id="2-1安装完成后再命令行输入git-version查看是否安装成功"><a href="#2-1安装完成后再命令行输入git-version查看是否安装成功" class="headerlink" title="2.1安装完成后再命令行输入git version查看是否安装成功"></a>2.1安装完成后再命令行输入git version查看是否安装成功</h4><pre><code>如果安装成功鼠标右键就会出现Git GUI Here和Git Bash Here两个按钮，然后选择Git Bash Here即可打开git命令行1. 安装教程：https://git-scm.com/download/win2. Git入门教程：http://git.oschina.net/progit/3. git常用命令    - git clone仓库地址：将远程仓库clone到本地    - git init ：新建仓库    - git pull： 抓取远程仓库所有分支更新并合并到本地    - git add 文件名或者.：添加新文件    - git commit：提交你的修改    - git push：推送本地仓库更新到远程仓库</code></pre><h2 id="二、hexo介绍及安装"><a href="#二、hexo介绍及安装" class="headerlink" title="二、hexo介绍及安装"></a>二、hexo介绍及安装</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="1-hexo安装"><a href="#1-hexo安装" class="headerlink" title="1.hexo安装"></a>1.hexo安装</h4><p>在命令行输入 npm install -g hexo-cli 即可安装hexo<br>安装完hexo还需安装将hexo部署到git page的deployer，在命令行输入 npm install hexo-deployer-git –save</p><h4 id="2-使用hexo建立建立需要的文件"><a href="#2-使用hexo建立建立需要的文件" class="headerlink" title="2.使用hexo建立建立需要的文件"></a>2.使用hexo建立建立需要的文件</h4><p>选择自己要存放文件的目录，右键打开点击Git Bash Here，进入命令行执行 hexo init，安装完以后会在指定文件夹的中新建需要的文件，目录结构如下<br>.git<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br>hexo配置参数可在<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/setup.html</a> 中参看</p><h4 id="3-执行hexo"><a href="#3-执行hexo" class="headerlink" title="3.执行hexo"></a>3.执行hexo</h4><pre><code>hexo根目录中执行hexo generate 以及 hexo server，并且登录localhost:4000，即可看到本地的效果： </code></pre><h2 id="三、将博客布置到github-Pages上"><a href="#三、将博客布置到github-Pages上" class="headerlink" title="三、将博客布置到github Pages上"></a>三、将博客布置到github Pages上</h2><p>经过以上步骤我们已经使用hexo搭建了一篇博客，但是我们只能通过本地查看，别人是不能看我们的博客的，所以现在我们需要将本地博客发布到服务器上，让别人也可以访问我们的博客，github Pages就可以帮我们实现这件事情，我们都知道github Pages的代码是保存在github上的所以现在我们需要在github上新建一个项目</p><h4 id="1-注册github账号"><a href="#1-注册github账号" class="headerlink" title="1.注册github账号"></a>1.注册github账号</h4><pre><code>访问github官网： https://github.com/点击Sign Up注册自己的账号</code></pre><h4 id="2-创建项目代码库"><a href="#2-创建项目代码库" class="headerlink" title="2.创建项目代码库"></a>2.创建项目代码库</h4><p>新用户点击New repository即可创建github Pages（如果已经创建过github Pages，点击github + 弹出新建github Pages主页，示例如下）</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-01.png" alt="创建github Pages"></p><p>在弹出的github Pages主页中填写需要的内容</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-02.png" alt="创建github Pages"></p><h4 id="3-配置SSH密钥"><a href="#3-配置SSH密钥" class="headerlink" title="3.配置SSH密钥"></a>3.配置SSH密钥</h4><p>Github的SSH密钥可以使本地git项目与远程的github建立联系，这样我们就能将本地代码通过git操作实现与Github库的代码同步，具体操作如下：</p><h5 id="1-查看本机是否已经存在-SSH密钥（keys）"><a href="#1-查看本机是否已经存在-SSH密钥（keys）" class="headerlink" title="1). 查看本机是否已经存在 SSH密钥（keys）"></a>1). 查看本机是否已经存在 SSH密钥（keys）</h5><pre><code>打开git命令行（可在任一位置打开）运行 cd ~/. ssh 检查本机用户home目录下是否存在.ssh目录，如果，不存在此目录，则进行2).操作，否则，你本机已经存在ssh公钥和私钥，可以略过2).步，直接进入3).操作</code></pre><h5 id="2-创建SSH密钥（keys）"><a href="#2-创建SSH密钥（keys）" class="headerlink" title="2). 创建SSH密钥（keys）"></a>2). 创建SSH密钥（keys）</h5><pre><code>$ssh-keygen -t rsa -C &quot;your_email@example.com&quot;（按照你提供的邮箱地址，创建一对密钥）</code></pre><p>直接回车，会将密钥按默认文件进行存储当然了你也可以输入特定的文件名，比如/c/Users/you/.ssh/github_rsa</p><pre><code>Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</code></pre><p>然后按照提示需要输入密码以及确认密码（一般其实也很安全，不需要密码，直接回车即可）</p><p>最后，输入完成之后，屏幕会显示如下信息：</p><pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</code></pre><h5 id="3-在github中添加你的公钥"><a href="#3-在github中添加你的公钥" class="headerlink" title="3). 在github中添加你的公钥"></a>3). 在github中添加你的公钥</h5><p>运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。（运行完成后直接右键赋值即可   ）</p><pre><code>clip &lt; ~/.ssh/id_rsa.pub</code></pre><h5 id="3-1-登录github"><a href="#3-1-登录github" class="headerlink" title="3.1 登录github"></a>3.1 登录github</h5><p>登录github进入Setting，如下图所示</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-03.png" alt="setting设置"></p><h5 id="3-2-选择SSH-and-GPG-keys"><a href="#3-2-选择SSH-and-GPG-keys" class="headerlink" title="3.2 选择SSH and GPG keys"></a>3.2 选择SSH and GPG keys</h5><p>选择SSH and GPG keys，如下图所示</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-04.png" alt="setting设置"></p><h5 id="3-2-选择New-SSH-key"><a href="#3-2-选择New-SSH-key" class="headerlink" title="3.2 选择New SSH key"></a>3.2 选择New SSH key</h5><p>点击右上角New SSH key即可添加</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-05.png" alt="选择SSH"></p><h5 id="3-3-粘贴密钥"><a href="#3-3-粘贴密钥" class="headerlink" title="3.3 粘贴密钥"></a>3.3 粘贴密钥</h5><p>将密钥粘贴在下方文本框中，如图</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-06.png" alt="保存SSH key"></p><h5 id="3-4-测试密钥"><a href="#3-4-测试密钥" class="headerlink" title="3.4 测试密钥"></a>3.4 测试密钥</h5><p>输入下方命令，查看是否成功</p><pre><code>ssh -T git@github.com</code></pre><p>如果是如下所示，输入yes回车即可</p><pre><code>The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?  </code></pre><h5 id="3-5-设置用户信息"><a href="#3-5-设置用户信息" class="headerlink" title="3.5 设置用户信息"></a>3.5 设置用户信息</h5><p>现在已经通过SSH链接到了Github，但是git是根据用户的名字和邮箱来提交的，github也是用名字和邮箱处理权限的，为了方便可以使用如下命令设置自己的 邮箱和名字</p><pre><code>git config --global user.name &quot;ryanlijianchang&quot;//用户名git config --global user.email  &quot;liji.anchang@163.com&quot;//填写自己的邮箱</code></pre><p>此时，SSH key已经配置成功，本机成功连接到github</p><h2 id="四-将hexo更新到github上"><a href="#四-将hexo更新到github上" class="headerlink" title="四. 将hexo更新到github上"></a>四. 将hexo更新到github上</h2><h5 id="4-1-打开github-pages"><a href="#4-1-打开github-pages" class="headerlink" title="4.1 打开github pages"></a>4.1 打开github pages</h5><p>登录自己的github，选择刚才新建的github pages （Amriams/Amriams.github.io）  </p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-07.png" alt="选择新建的pages"></p><h5 id="4-2-获取SSH类型地址"><a href="#4-2-获取SSH类型地址" class="headerlink" title="4.2 获取SSH类型地址"></a>4.2 获取SSH类型地址</h5><p>进去页面选择clone or download， 再选择Use SSH，复制SSH密钥</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-08.png" alt="复制SSh"></p><h5 id="4-3-配置hexo连接SSH"><a href="#4-3-配置hexo连接SSH" class="headerlink" title="4.3 配置hexo连接SSH"></a>4.3 配置hexo连接SSH</h5><p>打开新建的hexo根目录下的_config.yml文件</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-09.png" alt="配置_config.yml"></p><h5 id="4-3-配置SSH"><a href="#4-3-配置SSH" class="headerlink" title="4.3 配置SSH"></a>4.3 配置SSH</h5><p>在打开的文件里添加配置</p><pre><code>deploy: type: git repository: git@github.com:Abriams/Abriams.github.io.git branch: master</code></pre><p>如图：</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-10.png" alt="配置_config.yml"></p><h5 id="4-4-将本地hexo代码布置到github上"><a href="#4-4-将本地hexo代码布置到github上" class="headerlink" title="4.4 将本地hexo代码布置到github上"></a>4.4 将本地hexo代码布置到github上</h5><p>执行 hexo g -d 即可</p><p>执行时会让你输入github账号以及密码，输入完成后，回车即可在github pages服务器上访问我们的博客了，对应的地址就是username.github.io（我的博客是Abriams.github.io）</p><p>如果在上述执行过程中出现 ERROR Deployer not found: git，这个提示是你的deployer没有安装成功，所以需要安装</p><p>执行npm install hexo-deployer-git –save， 然后在执行hexo g -d就可将博客部署到github pages 上了</p><h5 id="4-5-访问自己的博客"><a href="#4-5-访问自己的博客" class="headerlink" title="4.5 访问自己的博客"></a>4.5 访问自己的博客</h5><p>访问<a href="https://Abriams.github.io就可看到自己的博客啦（https://您的用户名.github.io）" target="_blank" rel="noopener">https://Abriams.github.io就可看到自己的博客啦（https://您的用户名.github.io）</a></p><h5 id="4-6-美化博客"><a href="#4-6-美化博客" class="headerlink" title="4.6 美化博客"></a>4.6 美化博客</h5><p>进入hexo官网<a href="https://hexo.io/themes/选择自己喜欢的主题即可" target="_blank" rel="noopener">https://hexo.io/themes/选择自己喜欢的主题即可</a></p><p>选择好主题后再打开Hexo文件夹下的themes目录（E:\hexo\BIOG\themes），右键Git Bash，在命令行输入:</p><pre><code>git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址)</code></pre><p>等待下载完成后，打开Hexo文件夹下的配置文件_config.yml，修改参数为：theme: hexo-theme-next</p><p>然后依次执行 hexo g ， hexo s，打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 即可看见刚更新的主题啦。</p><p>更多hexo配置请在hexo官网<a href="https://hexo.io/zh-cn/docs/configuration.html查看详情" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration.html查看详情</a></p><h5 id="4-7部署新内容到github"><a href="#4-7部署新内容到github" class="headerlink" title="4.7部署新内容到github"></a>4.7部署新内容到github</h5><p>打开Hexo文件夹，右键Git Bash，输入</p><pre><code>hexo clean   (必须要，不然有时因为缓存问题，服务器更新不了主题)hexo g -d</code></pre><p>执行完成后访问https://您的用户名.github.io即可</p><h2 id="五-使用hexo写博客"><a href="#五-使用hexo写博客" class="headerlink" title="五. 使用hexo写博客"></a>五. 使用hexo写博客</h2><p>首先新建文件 hexo n “文章标题” ，执行完成后会在项目E:\hexo\BIOG\source_posts中生成 文章标题.md文件，当然，也可以直接在\Hexo\source_posts中新建一个md文件，然后使用markdown书写文章即可，文章完成后使用执行hexo g（生成）， hexo d（部署），就会将文章部署到github上</p><h2 id="六-在hexo中华添加图片"><a href="#六-在hexo中华添加图片" class="headerlink" title="六.在hexo中华添加图片"></a>六.在hexo中华添加图片</h2><p>1 把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true</p><p>2 在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，（上传本地图片的插件）</p><p>3 等待一段时间后，再运行hexo n “xxxx”来生成md文件时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹</p><p>4 最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：<img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/图片名.jpg" alt="你想输入的替代文字"></p><h2 id="七、将独立域名关联到github-pages上"><a href="#七、将独立域名关联到github-pages上" class="headerlink" title="七、将独立域名关联到github pages上"></a>七、将独立域名关联到github pages上</h2><h3 id="1-购买域名"><a href="#1-购买域名" class="headerlink" title="1. 购买域名"></a>1. 购买域名</h3><p>选择自己喜欢的域名购买即可，我是在腾讯云购买的一下一腾讯云为例<a href="https://cloud.tencent.com/?fromSource=gwzcw.234976.234976.234976" target="_blank" rel="noopener">https://cloud.tencent.com/?fromSource=gwzcw.234976.234976.234976</a></p><h3 id="2-配置域名"><a href="#2-配置域名" class="headerlink" title="2. 配置域名"></a>2. 配置域名</h3><p>域名买好后在<a href="https://console.qcloud.com/domain/mydomain" target="_blank" rel="noopener">https://console.qcloud.com/domain/mydomain</a> 中管理自己的域名</p><p>进去我的域名页面点击解析，如下图</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-11.png" alt="域名解析"></p><p>选择添加记录，添加即可，如下图</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-12.png" alt="域名解析"></p><p>然后打开github pages你的项目，选择Settings</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-13.png" alt="选择settings"></p><p>下拉到github pages设置添加域名</p><p><img src="/2018/07/23/cjsog2upj000qxsvbpbqviur8/images-14.png" alt="添加域名"></p><h2 id="八-hexo中添加标签选项"><a href="#八-hexo中添加标签选项" class="headerlink" title="八.hexo中添加标签选项"></a>八.hexo中添加标签选项</h2><h5 id="1-生成“标签页”并添加type属性"><a href="#1-生成“标签页”并添加type属性" class="headerlink" title="1 生成“标签页”并添加type属性"></a>1 生成“标签页”并添加type属性</h5><p>打开命令行执行如下命令</p><pre><code>hexo new page tags成功后会提示INFO  Created: ~/Documents/blog/source/tags/index.md</code></pre><p>找到blog/source/tags/index.md的文件并添加type: “tags”如下所示：</p><pre><code>---title: 文章分类date: 2017-05-27 13:47:40type: &quot;tags&quot;---</code></pre><h5 id="2-给文章添加”tags”属性"><a href="#2-给文章添加”tags”属性" class="headerlink" title="2 给文章添加”tags”属性"></a>2 给文章添加”tags”属性</h5><p>打开需要添加标签的文章，并添加tags属性，如下（tags后的- vuex就是标签内容）</p><pre><code>---title: vuex个人理解tags:- vuex---</code></pre><p>注意：只有添加了tags: xxx的文章才会被收录到首页的“标签”中。</p><h4 id="九-添加微博秀"><a href="#九-添加微博秀" class="headerlink" title="九.添加微博秀"></a>九.添加微博秀</h4><p>首先获取在微博上获取微博秀</p><pre><code>&lt;iframe width=&quot;100%&quot; height=&quot;550&quot; class=&quot;share_self&quot;  frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=550&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=1&amp;isTitle=1&amp;noborder=1&amp;isWeibo=1&amp;isFans=1&amp;uid=6110018783&amp;verifier=e6a8e226&amp;dpc=1&quot;&gt;&lt;/iframe&gt;</code></pre><p>找到BIOG/themes/BlueLake/layout/_widget/weibo.jade文件将src=””里面的内容换成微博秀src=””里面的内容</p><p>然后找到跟目录下的_config.yml文件，将widgets:添加- weibo 如下：</p><pre><code>widgets:  - recent_posts  - category  - tag  - archive  - weibo  - links</code></pre><p>注意：如果网站使用的是https协议，需要将微博秀中的http换成https即可；</p><h4 id="10-设置百度分享（https）"><a href="#10-设置百度分享（https）" class="headerlink" title="10.设置百度分享（https）"></a>10.设置百度分享（https）</h4><p>首先下载百度分享的文件 <a href="https://themebetter.com/uploads/2017/09/static.zip" target="_blank" rel="noopener">https://themebetter.com/uploads/2017/09/static.zip</a>  （解压码：themebetter）；<br>将下载后的文件放到主题文件夹下的source文件夹下</p><p>修改百度分享代码：在主题文件夹下的layout/_partial/comment_js.jade 下全局搜索<a href="http://bgimg.share.baidu.com并去掉http://bgimg.share.baidu.com即可；" target="_blank" rel="noopener">http://bgimg.share.baidu.com并去掉http://bgimg.share.baidu.com即可；</a></p><pre><code>window._bd_share_config={&quot;common&quot;:{&quot;bdSnsKey&quot;:{},&quot;bdText&quot;:&quot;&quot;,&quot;bdMini&quot;:&quot;2&quot;,&quot;bdMiniList&quot;:[&quot;mshare&quot;,&quot;weixin&quot;,&quot;tsina&quot;,&quot;qzone&quot;,&quot;linkedin&quot;,&quot;fbook&quot;,&quot;twi&quot;,&quot;print&quot;,&quot;renren&quot;,&quot;sqq&quot;,&quot;evernotecn&quot;,&quot;bdysc&quot;,&quot;tqq&quot;,&quot;tqf&quot;,&quot;bdxc&quot;,&quot;kaixin001&quot;,&quot;tieba&quot;,&quot;douban&quot;,&quot;bdhome&quot;,&quot;thx&quot;,&quot;ibaidu&quot;,&quot;meilishuo&quot;,&quot;mogujie&quot;,&quot;diandian&quot;,&quot;huaban&quot;,&quot;duitang&quot;,&quot;hx&quot;,&quot;fx&quot;,&quot;youdao&quot;,&quot;sdo&quot;,&quot;qingbiji&quot;,&quot;people&quot;,&quot;xinhua&quot;,&quot;mail&quot;,&quot;isohu&quot;,&quot;yaolan&quot;,&quot;wealink&quot;,&quot;ty&quot;,&quot;iguba&quot;,&quot;h163&quot;,&quot;copy&quot;],&quot;bdPic&quot;:&quot;&quot;,&quot;bdStyle&quot;:&quot;1&quot;,&quot;bdSize&quot;:&quot;16&quot;},&quot;share&quot;:{},&quot;image&quot;:{&quot;viewList&quot;:[&quot;tsina&quot;,&quot;qzone&quot;,&quot;weixin&quot;,&quot;fbook&quot;,&quot;twi&quot;,&quot;linkedin&quot;,&quot;youdao&quot;,&quot;evernotecn&quot;,&quot;mshare&quot;],&quot;viewText&quot;:&quot;分享到：&quot;,&quot;viewSize&quot;:&quot;16&quot;},&quot;selectShare&quot;:{&quot;bdContainerClass&quot;:null,&quot;bdSelectMiniList&quot;:[&quot;tsina&quot;,&quot;qzone&quot;,&quot;weixin&quot;,&quot;fbook&quot;,&quot;twi&quot;,&quot;linkedin&quot;,&quot;youdao&quot;,&quot;evernotecn&quot;,&quot;mshare&quot;]}};with(document)0[(getElementsByTagName(&apos;head&apos;)[0]||head).appendChild(createElement(&apos;script&apos;)).src=&apos;http://bgimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos;+~(-new Date()/36e5)]//执行完上面几部发现请求的百度分享地址已经替换成了本地，但是在控制台会报错；这是hexo编译了static文件夹导致的；</code></pre><p>最后修改根目录下的—_config.yml文件</p><p>找到skip_render并添加static/** ，如下所示</p><pre><code>skip_render: static/**//防止hexo编译static文件导致报错；</code></pre><p>小结：通过以上操作，一篇博客终于搭建成功了，虽然在搭建的过程中会遇到各种问题，这需要我们耐心解决，当所有问题都完成后，我个人收货到了很大成果，也希望各位小伙伴能有自己的收获，另外，既然博客搭建成功了，那么就一定要坚持下去，不需要每天都写，但是每个月写自己的总结心得，总是不过分的吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先附上我使用hexo搭建的博客：&lt;a href=&quot;https://23ybob.club/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://23ybob.club/&lt;/a&gt;&lt;br&gt;github地址: &lt;a href=&quot;https://git
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.23ybob.club/tags/hexo/"/>
    
      <category term="github pages" scheme="https://www.23ybob.club/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title>vuex个人理解</title>
    <link href="https://www.23ybob.club/2018/07/19/cjsog2u5p000axsvb51qteooy/"/>
    <id>https://www.23ybob.club/2018/07/19/cjsog2u5p000axsvb51qteooy/</id>
    <published>2018-07-19T07:17:01.654Z</published>
    <updated>2018-08-16T06:32:39.698Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是vuex及其作用"><a href="#什么是vuex及其作用" class="headerlink" title="什么是vuex及其作用"></a>什么是vuex及其作用</h4><p>vuex是一个转为vue.js开发的状态管理模式（如同redux是为react提供的状态管理模式），采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h3 id="什么是”状态管理模式”"><a href="#什么是”状态管理模式”" class="headerlink" title="什么是”状态管理模式”"></a>什么是”状态管理模式”</h3><p>在我看来就是在vue中把需要共享的变量全部存储在一个对象里面，然后将这个对象放在顶层组件中，以供其他任意组件使用；</p><h3 id="vuex核心"><a href="#vuex核心" class="headerlink" title="vuex核心"></a>vuex核心</h3><p>vuex核心就是store仓库，也就是一个容器，在这个容器中存储着vuex应用的状态（state）</p><h3 id="vuex特点"><a href="#vuex特点" class="headerlink" title="vuex特点"></a>vuex特点</h3><ol><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li>在vuex中你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li></ol><h3 id="vuex案例实现"><a href="#vuex案例实现" class="headerlink" title="vuex案例实现"></a>vuex案例实现</h3><h4 id="1、将state-mutations-actions写在一起"><a href="#1、将state-mutations-actions写在一起" class="headerlink" title="1、将state,mutations,actions写在一起"></a>1、将state,mutations,actions写在一起</h4><ol><li><p>安装vuex，在命令行执行如下命令（注意点：要加上–save，因为这个包在生产环境中是要使用的）</p><p> npm install vuex –save</p></li><li><p>新建store文件夹（名称不唯一），并在store文件夹中新家store.js文件，然后引入vue,以及vuex；代码实现如下</p><p> import Vue from ‘vue’;<br> import Vuex from ‘vuex’;</p></li><li><p>使用vuex，代码如下</p><p> Vue.use(Vuex);</p></li></ol><p>通过以上3步vuex就可以使用了，接下来就用一个小案例具体实现</p><ol start="4"><li><p>在main.js中引入刚新建的store文件</p><p> import store from ‘./store/store’</p></li><li><p>在实例化Vue对象中加入store对象</p><p> new Vue({</p><pre><code>el: &apos;#app&apos;,router,store,//使用storetemplate: &apos;&lt;App/&gt;&apos;,components: { App }</code></pre><p> })</p></li></ol><p>demo介绍</p><ol start="6"><li><p>在store.js定义要使用的对象</p><p> const state = {</p><pre><code>count:1</code></pre><p> }</p></li><li><p>在store.js中加入改变state的方法</p><p> //提交state的唯一途径（mutations），state对应上边const state中存储的值；<br> const mutations={</p><pre><code>add(state){    state.count++;}</code></pre><p> }</p></li><li><p>actions提交mutations（actions不能直接提交state，只能通过提交mutations改变state）</p><p> //提交mutations<br> const actions ={</p><pre><code>//Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象addCount(context){    context.commit(&apos;add&apos;)}</code></pre><p> }</p></li><li><p>getter获取store中的 state 中派生出的一些状态</p><p> getters: {</p><pre><code>counts: state =&gt; {    return state.count - 1}</code></pre><p> }</p></li><li><p>在组建中使用</p></li></ol><p>新建count.vue组建具体代码如下</p><pre><code>&lt;template&gt;    &lt;div&gt;        &lt;button @click=&quot;addCount&quot;&gt;-&lt;/button&gt;    &lt;/div&gt;&lt;/template&gt;//在组件中通过mapState对象赋值//首先引入mapState对象&apos;;//然后在computed计算属性里获取值并操作：&lt;script&gt;    import {mapState} from &apos;vuex&apos;;    export default {        computed:mapState({            //理解为传入state对象，修改state.count属性；              count:state=&gt;state.count          })    }&lt;/script&gt;</code></pre><h4 id="2、将state-mutations-actions分开管理"><a href="#2、将state-mutations-actions分开管理" class="headerlink" title="2、将state,mutations,actions分开管理"></a>2、将state,mutations,actions分开管理</h4><p>1.建立相应目录<br>    src文件夹下新建store文件夹<br>    在store文件夹下新建cart文件夹，index.js文件<br>    在cart文件夹下新建state.js, mutations.js, mutation_type, actions.js, getters.js, index.js</p><ol start="2"><li><p>在store文件夹下的index.js问价下添加如下代码</p><p> import Vue from ‘vue’;<br> import Vuex from ‘vuex’;<br> Vue.use(Vuex);</p><p> import cart from ‘./cart/‘;</p><p> export default new Vuex.Store({</p><pre><code>modules: {    cart}</code></pre><p> });</p></li><li><p>在cart文件夹下的state.js定义要使用的对象</p><p> export default {</p><pre><code>count: 1,isshow: false,params: &apos;hide&apos;</code></pre><p> }</p></li><li><p>在mutations.js问价中改变state.js中的状态</p><p> import * as types from ‘./mutations_types’<br> export default {</p><pre><code>[types.COUNT_LOCAL](state) {    state.count += 1} ,[types.REDUCE_LOCAL](state) {    state.count -= 1} ,[types.ISSHOW_LOCAl](state,params) {    state.isshow = !state.isshow    state.params = &apos;hide&apos; ? &apos;show&apos; : &apos;hide&apos;}</code></pre><p> }</p></li><li><p>在mutations_type.js中分离mutations.js，便于后期维护</p><p> export const COUNT_LOCAL = ‘COUNT_LOCAL’<br> export const ISSHOW_LOCAl = ‘ISSHOW_LOCAl’<br> export const REDUCE_LOCAL = ‘REDUCE_LOCAL’</p></li><li><p>在action.js中提交mutations</p><p> import * as types from ‘./mutations_types’<br> export default {</p><pre><code>change_count: ({    commit}) =&gt; {    commit(types.COUNT_LOCAL);},change_isshow: ({    commit},{params}) =&gt; {    commit(types.ISSHOW_LOCAl,{params});},change_reduce: ({    commit}) =&gt; {    commit(types.REDUCE_LOCAL)}</code></pre><p> }</p></li></ol><p>7.在getters.js中获取state中的派生状态</p><pre><code>export default {    getCount(state) {        return state.count;    }};</code></pre><ol start="8"><li><p>在caet文件夹下的index.js中导出数据</p><p> import state from ‘./state’;<br> import mutations from ‘./mutations’;<br> import getters from ‘./getters’;<br> import actions from ‘./actions’;</p><p> export default {</p><pre><code>state,mutations,getters,actions</code></pre><p> };</p></li><li><p>在组件中使用（使用dispatch提交）</p><p> <template></template></p><pre><code>&lt;div&gt;    &lt;h3&gt;&lt;/h3&gt;    &lt;button @click=&quot;change()&quot;&gt;+&lt;/button&gt;    &lt;button @click=&quot;$store.dispatch(&apos;change_reduce&apos;)&quot;&gt;-&lt;/button&gt;    &lt;button @click=&quot;getmessage()&quot;&gt;get&lt;/button&gt;    &lt;input type=&quot;text&quot; :value=&quot;$store.state.cart.count&quot;&gt;    &lt;button @click=&quot;changeShow()&quot; ref=&quot;hide&quot;&gt;hide&lt;/button&gt;    &lt;input type=&quot;text&quot; v-show=&quot;show&quot; value=&quot;11&quot;&gt;&lt;/div&gt;</code></pre><p> </p><pre><code>&lt;script&gt;    import { mapState } from &apos;vuex&apos;    export default {        data () {            return {                msg: &apos;Hellow Vuex&apos;,                show: false            }        },        methods: {            getmessage() {                console.log(this.$store.state.cart.count)            },            change() {                this.$store.dispatch(&apos;change_count&apos;);            },            changeShow() {                let ishide = this.$store.state.cart.params;                if( ishide == &apos;hide&apos;) {                    ishide = &apos;show&apos;                } else {                    ishide = &apos;hide&apos;                }                console.log(ishide);                this.$store.dispatch(&apos;change_isshow&apos;,&apos;ishide&apos;)                this.show = this.$store.state.cart.isshow                this.$refs.hide.innerHTML = this.$store.state.cart.params                // console.log(this.$store.state.cart.params)            }        },        computed: {            ...mapState({                count: state =&gt; {                    console.log(state.count)                }            })        }    }&lt;/script&gt;</code></pre></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><pre><code>假如你的项目需要数据 和 组件 分离，分别处理，使用 Vuex 是非常合适的，相反，如果不需要分离处理，那么不使用 Vuex 也没关系。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是vuex及其作用&quot;&gt;&lt;a href=&quot;#什么是vuex及其作用&quot; class=&quot;headerlink&quot; title=&quot;什么是vuex及其作用&quot;&gt;&lt;/a&gt;什么是vuex及其作用&lt;/h4&gt;&lt;p&gt;vuex是一个转为vue.js开发的状态管理模式（如同redux是为
      
    
    </summary>
    
    
      <category term="vuex" scheme="https://www.23ybob.club/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>初识前端</title>
    <link href="https://www.23ybob.club/2018/07/19/cjsog2u5e0002xsvbc8wfir2k/"/>
    <id>https://www.23ybob.club/2018/07/19/cjsog2u5e0002xsvbc8wfir2k/</id>
    <published>2018-07-19T06:02:57.119Z</published>
    <updated>2019-02-15T10:07:17.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="个人对前端的理解"><a href="#个人对前端的理解" class="headerlink" title="个人对前端的理解"></a>个人对前端的理解</h3><h4 id="前端发展"><a href="#前端发展" class="headerlink" title="前端发展"></a>前端发展</h4><h5 id="1-什么是前端"><a href="#1-什么是前端" class="headerlink" title="1.什么是前端"></a>1.什么是前端</h5><p>虽然是做前端的，但是具体概念还真不知道，个人感觉就是写页面，渲染数据</p><h5 id="2-前端演进史"><a href="#2-前端演进史" class="headerlink" title="2.前端演进史"></a>2.前端演进史</h5><h5 id="2-1-从静态走向动态"><a href="#2-1-从静态走向动态" class="headerlink" title="2.1.从静态走向动态"></a>2.1.从静态走向动态</h5><p>大约1994就是前端发展的历史吧，前端都知道1943年10月13日网景公司推出了第一版Navigator；Tim Berners-Lee创建了W3C；Tim的基友发布了CSS。同样在这一年，为动态web网页设计的服务端脚本PHP诞生。</p><p>早期网页都是为了方便科学家看文章，传论文而制造的，这也就是为什么Web网页都基于Document，随着网页技术从学术机构走向社会，网页承载的功能已经不足以满足当前需求，因此早期网页的局限性也显示出来了</p><h6 id="2-1-1-所有的网页都基于HTML页面，因为没有任何手段可以控制局部内容的显示和隐藏，因此任何局部的变化哪怕只多出一个标点符号，都只能重新下载一个新的页面。"><a href="#2-1-1-所有的网页都基于HTML页面，因为没有任何手段可以控制局部内容的显示和隐藏，因此任何局部的变化哪怕只多出一个标点符号，都只能重新下载一个新的页面。" class="headerlink" title="2.1.1 所有的网页都基于HTML页面，因为没有任何手段可以控制局部内容的显示和隐藏，因此任何局部的变化哪怕只多出一个标点符号，都只能重新下载一个新的页面。"></a>2.1.1 所有的网页都基于HTML页面，因为没有任何手段可以控制局部内容的显示和隐藏，因此任何局部的变化哪怕只多出一个标点符号，都只能重新下载一个新的页面。</h6><h6 id="2-1-2-计算任务只能在服务端实现。由于网速限制，与服务器通信的过程是非常缓慢的，并且此过程是同步阻塞的，于是会出现这样的场景：用户提交一个表单，然后整个页面消失，浏览器呈现白屏，经过漫长的等待，浏览器渲染出一个和之前一模一样的页面，只不过输入框旁边多了一排红色小字：用户名错误。"><a href="#2-1-2-计算任务只能在服务端实现。由于网速限制，与服务器通信的过程是非常缓慢的，并且此过程是同步阻塞的，于是会出现这样的场景：用户提交一个表单，然后整个页面消失，浏览器呈现白屏，经过漫长的等待，浏览器渲染出一个和之前一模一样的页面，只不过输入框旁边多了一排红色小字：用户名错误。" class="headerlink" title="2.1.2 计算任务只能在服务端实现。由于网速限制，与服务器通信的过程是非常缓慢的，并且此过程是同步阻塞的，于是会出现这样的场景：用户提交一个表单，然后整个页面消失，浏览器呈现白屏，经过漫长的等待，浏览器渲染出一个和之前一模一样的页面，只不过输入框旁边多了一排红色小字：用户名错误。"></a>2.1.2 计算任务只能在服务端实现。由于网速限制，与服务器通信的过程是非常缓慢的，并且此过程是同步阻塞的，于是会出现这样的场景：用户提交一个表单，然后整个页面消失，浏览器呈现白屏，经过漫长的等待，浏览器渲染出一个和之前一模一样的页面，只不过输入框旁边多了一排红色小字：用户名错误。</h6><h6 id="2-1-3-所有页面都是静态的，这意味着一个电商网站有一千种商品，哪怕页面布局一模一样，也必须写一千个单独的页面。"><a href="#2-1-3-所有页面都是静态的，这意味着一个电商网站有一千种商品，哪怕页面布局一模一样，也必须写一千个单独的页面。" class="headerlink" title="2.1.3 所有页面都是静态的，这意味着一个电商网站有一千种商品，哪怕页面布局一模一样，也必须写一千个单独的页面。"></a>2.1.3 所有页面都是静态的，这意味着一个电商网站有一千种商品，哪怕页面布局一模一样，也必须写一千个单独的页面。</h6><p>1994年Rasmus Lerdorf为了维护个人网站而创建了PHP，PHP实现了与数据库的交互以及用于生产动态页面的模板引擎，是Web领域中最主流的服务端语言。</p><p>1995年网景推出了JavaScript，实现了客户端的计算任务（如表单验证）。</p><p>1996年微软推出了iframe标签，实现了异步的局部加载。</p><p>1999年W3C发布第四代HTML标准，同年微软推出用于异步数据传输的ActiveX，随即各大浏览器厂商模仿实现了XMLHttpRequest。这标识着Ajax的诞生，但是Ajax这个词是在六年后问世的，特别是在谷歌使用Ajax技术打造了Gmail和谷歌地图之后，Ajax获得了巨大的关注。Ajax是Web网页迈向Web应用的关键技术，它标识着Web2.0时代的到来。</p><p>2006年，XMLHttpRequest被W3C正式纳入标准。</p><p>至此，早期的Document终于进化为了Web page，早期网页的三个局限都得到了妥善的解决。</p><h6 id="2-2从后端走向前端"><a href="#2-2从后端走向前端" class="headerlink" title="2.2从后端走向前端"></a>2.2从后端走向前端</h6><pre><code>早期网页都是有后端主导的，前端也就只是操作dom，2006年 John Resig发布了jQuery，主要用于操作DOM起初制约Web开发从后到前的因素很简单，就是前端很多事干不了或干不好，当时的浏览器性能弱，标准化程度低，2008年问世的谷歌V8引擎改变了这一局面，现代浏览器的崛起终结了微软的垄断时代ECMA也在2009年发布了第五代JavaScript2009年AngularJS诞生，随后被谷歌收购。2010年backbone.js诞生。2011年React和Ember诞生。2014年Vue.js诞生……前后端分离可谓大势所趋。</code></pre><p>参考：<br>    Web开发的发展史<a href="http://blog.jobbole.com/45169/" target="_blank" rel="noopener">http://blog.jobbole.com/45169/</a><br>    <a href="https://www.cnblogs.com/leolovexx/p/7249314.html" target="_blank" rel="noopener">https://www.cnblogs.com/leolovexx/p/7249314.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;个人对前端的理解&quot;&gt;&lt;a href=&quot;#个人对前端的理解&quot; class=&quot;headerlink&quot; title=&quot;个人对前端的理解&quot;&gt;&lt;/a&gt;个人对前端的理解&lt;/h3&gt;&lt;h4 id=&quot;前端发展&quot;&gt;&lt;a href=&quot;#前端发展&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="前端历史" scheme="https://www.23ybob.club/tags/%E5%89%8D%E7%AB%AF%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
</feed>
